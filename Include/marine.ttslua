require("instances")
require("utils")

local health = {
   value = 10,
   max = 10
}

local startingHealthModifier = {2, 2, 0, -1, -2}

local initialLocation = {
  Red = {pos = {32.50, 1.01, -29.50}, rot = {0.00, 90.00, 0.00}},
  Green = {pos = {46.50, 1.01, -7.50}, rot = {0.00, 0.00, 0.00}},
  Blue = {pos = {39.50, 1.01, 29.50}, rot = {0.00, 270.00, 0.00}},
}

local deathTokenJSON = [[
{
  "Name": "Card",
  "Transform": {
    "scaleX": 0.305394262,
    "scaleY": 1.0,
    "scaleZ": 0.305394262
  },
  "Nickname": "Frag location",
  "Description": "Marks location of marine death to help with finding respawn zone",
  "ColorDiffuse": {
    "r": 0.713235259,
    "g": 0.713235259,
    "b": 0.713235259
  },
  "Locked": true,
  "CardID": 429,
  "SidewaysCard": false,
  "CustomDeck": {
    "4": {
      "FaceURL": "https://www.dropbox.com/s/i6nu0krw0tluvgy/httpdoomttsspaghetticattokens20frontjpg.jpg?dl=1",
      "BackURL": "https://www.dropbox.com/s/k1hgysontgv9yb5/httpdoomttsspaghetticattokens20backjpg.jpg?dl=1",
      "NumWidth": 10,
      "NumHeight": 7,
      "BackIsHidden": false,
      "UniqueBack": true,
      "Type": 0
    }
  },
}]]

local armor = 2

-- Local methods declaration
local checkLoaded
local createBtns
local healthChange
local updateHealthUI
local isUIElementActive
local changeArmor

function onLoad(save_state)
  saved_data = JSON.decode(save_state)

  -- Health
  if saved_data and saved_data.health then
    health = saved_data.health
  end

  Wait.condition(updateHealthUI, checkLoaded)
  createBtns()
end

function checkLoaded()
  return not self.loading_custom and not self.spawning
end

function onSave()
   local save_state = JSON.encode({health = health})
   self.script_state = save_state
end

function createBtns()
  local buttonParameter = {
    click_function = "add",
    function_owner = self,
    position = {0.3, 0.02, -0.2},
    rotation= {0, 90, 0},
    label = "+",
    width = 250,
    height = 250,
    font_size = 300,
    color = {0,0,0,0.1},
    font_color = {1,1,1,7}}
  self.createButton(buttonParameter)
  buttonParameter.position = {0.3, 0.02, 0.2}
  buttonParameter.click_function = "sub"
  buttonParameter.label = "-"
  self.createButton(buttonParameter)
end


function add(self, playerColor, value, id) healthChange(playerColor, "add") end
function sub(self, playerColor, value, id) healthChange(playerColor, "sub") end

-- Do the appropriate healing / damaging
function hits(player, change)
  healthChange(player.color, change)
end


function onHealthPickup(player_color)
  if (health.value == health.max) then
    return false
  end

  for i = 1, 3 do
    healthChange(player_color, "add")
  end

  return true
end

function onBarrelExplosion(player_color)
  healthChange(player_color, "sub")
end

function healthChange(playerColor, change)
  local oldHP = health.value

  if change == "add" then
    health.value = health.value + 1
  elseif change == "addMax" then
    health.value = health.value + 1
    health.max = health.max + 1
  elseif change == "sub" then
    health.value = health.value - 1
  elseif change == "subMax" then
    health.value = health.value - 1
    if health.max > 0 then health.max = health.max - 1 end
  end

  -- Boundary-check health values
  if health.value > health.max then health.value = health.max end
  if health.value < 0 then health.value = 0 end
  updateHealthUI()

  if change == "add" then
     if oldHP ~= health.value then
        printToAll("HP of " .. self.getName() .. ": " .. health.value .. " (+1)", stringColorToRGB(playerColor))
     end
  elseif change == "sub" then
     if oldHP ~= health.value then
        printToAll("HP of " .. self.getName() .. ": " .. health.value .. " (-1)", stringColorToRGB(playerColor))
        instances.inv.call("onMarineWounded", utils.getColor(self.getName()))
     end
  end
end

-- Sets health in the UI
function updateHealthUI()

   -- Activate defeat interface
   if health.value < 1 then
      self.UI.setAttribute("defeatPanel", "active", true)
      self.UI.setAttribute("healthbar", "active", false)
      self.UI.setAttribute("editButton", "active", false)
   else
      self.UI.setAttribute("defeatPanel", "active", false)
      self.UI.setAttribute("healthbar", "active", true)
      self.UI.setAttribute("editButton", "active", true)
   end

   self.UI.setAttribute("progressBar", "percentage", health.value / health.max * 100)
   self.UI.setAttribute("healthbar", "text", health.value .. "/" .. health.max)
   self.setDescription(health.value .. "/" .. health.max)
   self.UI.setAttribute("panel", "position", "0 0 -" .. self.getBounds().size.y / self.getScale().y * 110)
end

function singleCustomizationClick(params)
  if not isUIElementActive("healthAddPanel") then
    broadcastToColor("Use doubleclick on healthbar to adjust max hp and armor",
      params.color, params.color)
  else
    -- turning of with single click is also ok
    toggleCustomizationUI()
  end
end

function toggleCustomizationUI()
   -- Toggle max health modifier panel
   toggleUIActivity("healthAddPanel")
   toggleUIActivity("healthSubPanel")

   -- Toggle armor value buttons
   toggleUIActivity("addArmor")
   toggleUIActivity("subArmor")
end

-- Toggle the customization interface (armor, max health)
function onCustomizationUiClick(player, value, id)
  instances.click.call("handleClickByType",
    {color = player.color,
    id = id..self.getGUID(),
    owner = self,
    single = "singleCustomizationClick",
    parametersSingle = {color=player.color},
    double = "toggleCustomizationUI",
  })
end

-- isUIElementActive(string:elementID)
-- Returns boolean:True if element attribute "active" matches "True" or "true"
-- Returns boolean:False for all other circumstances
function isUIElementActive(elementID)
   local attributeValue = self.UI.getAttribute(elementID, "active")
   return (attributeValue == "True") or (attributeValue == "true")
end

-- toggleUIActivity(string:elementID, boolean:state)
-- Set "active" attribute of UI element to given boolean value
function toggleUIActivity(elementID, state)
   if state == nil then state = not isUIElementActive(elementID) end
   self.UI.setAttribute(elementID, "active", state)
   self.UI.setAttribute(elementID, "textColor", "White")
end


-- Change armor value
function addArmor() changeArmor(1) end
function subArmor() changeArmor(-1) end
function changeArmor(delta)
  armor = tonumber(self.UI.getAttribute("armor", "text")) + delta
  if armor > 10 then armor = 10 end
  if armor < 1 then armor = 1 end
  self.UI.setAttribute("armor", "text", armor)
  instances.inv.call("onMarineArmorSet", {color=utils.getColor(self.getName()), armor=armor})
end

-- Summon marker, move figure away,  restore hp, notify inventory to do the rest
function defeatClick(player, value, id)
  health.value = health.max
  updateHealthUI()

  local color = utils.getColor(self.getName())
  local deathTokenPos = self.getPosition()
  -- without this correction, token is spawned slightly in air
  deathTokenPos.y = deathTokenPos.y - 0.03
  resetPosition()

  instances.inv.call("onMarineDeath", color)

  spawnObjectJSON({
    json              = deathTokenJSON,
    position          = deathTokenPos,
    rotation          = {0,0,0},
    snap_to_grid      = true,
  })

end

function resetPosition()
  local color = utils.getColor(self.getName())
  self.setPositionSmooth(initialLocation[color].pos, false, false)
  self.setRotationSmooth(initialLocation[color].rot, false, false)
end

function onArmorSet(armorValue)
  self.UI.setAttribute("armor", "text", armorValue)
end

function onOrderChange(newOrder)
  if not newOrder then
    self.UI.setAttribute("orderButton", "active", "false")
  else
    self.UI.setAttribute("orderButton", "active", "true")
    self.UI.setAttribute("orderImage", "image", newOrder)
  end
end

function resetHealth(difficulty)
  health.max = 11 - utils.getMarineCount() + startingHealthModifier[difficulty]
  health.value = health.max
  updateHealthUI()
end