require("instances")
require("utils")

local health = {
   value = 10,
   max = 10
}

local startingHealthModifier = {2, 2, 0, -1, -2}

local initialLocation = {
  Red = {pos = {32.50, 1.01, -29.50}, rot = {0.00, 90.00, 0.00}},
  Green = {pos = {46.50, 1.01, -7.50}, rot = {0.00, 0.00, 0.00}},
  Blue = {pos = {39.50, 1.01, 29.50}, rot = {0.00, 270.00, 0.00}},
}

-- Local methods declaration
local checkLoaded
local createBtns
local healthChange
local updateHealthUI
local isUIElementActive
local changeArmor

function onLoad(save_state)
  saved_data = JSON.decode(save_state)

  -- Health
  if saved_data and saved_data.health then
    health = saved_data.health
  end

  Wait.condition(updateHealthUI, checkLoaded)
  createBtns()
end

function checkLoaded()
  return not self.loading_custom and not self.spawning
end

function onSave()
   local save_state = JSON.encode({health = health})
   self.script_state = save_state
end

-- If buttons were statically added to XML, they wouldn't be acessible inside
-- figurine collider. However, creating them with script avoids this trouble:
-- even within collider they somehow got priority, so they consume mouse button press.
function createBtns()
  local buttonParameter = {
    click_function = "add",
    function_owner = self,
    position = {0.3, 0.02, -0.2},
    rotation= {0, 90, 0},
    label = "+",
    width = 250,
    height = 250,
    font_size = 300,
    color = {0,0,0,0.1},
    font_color = {1,1,1,7}}
  self.createButton(buttonParameter)
  buttonParameter.position = {0.3, 0.02, 0.2}
  buttonParameter.click_function = "sub"
  buttonParameter.label = "-"
  self.createButton(buttonParameter)
end


function add(self, playerColor, value, id) healthChange(playerColor, 1) end
function sub(self, playerColor, value, id) healthChange(playerColor, -1) end

function changeMaxHp(player, change)
  healthChange(player.color, tonumber(change), true)
end

function isFullHp()
  return health.value == health.max
end

function onUpgrade(upgrade)
  if upgrade == "heal" then
    if isFullHp() then
      local color = utils.getColor(self.getName())
      broadcastToColor("Already at full health", color, color)
      return false
    else
      healthChange(utils.getColor(self.getName()), 1)
      return true
    end

  elseif upgrade == "maxhp" then
    healthChange(utils.getColor(self.getName()), 1, true)
    return true
  end
end

function onHealthPickup(player_color)
  if isFullHp() then
    return false
  end

  healthChange(player_color, 3)

  return true
end

function onBarrelExplosion(player_color)
  healthChange(player_color, -1)
end

-- number of actually lost hitpoints is determined by armor
function inflictDamage(req)
  local armor = tonumber(self.UI.getAttribute("armor", "text"), 10)
  local wounds = math.floor(req.damage/armor)
  healthChange(req.color, -wounds)
end

function healthChange(playerColor, delta, isMaxHp)
  if delta == 0 then
    return
  end

  local oldHP = health.value
  local oldMax = health.max

  local sign = delta > 0 and "+" or "" -- minus wil be printed anyway

  if isMaxHp then
    health.max = math.max(1, health.max + delta)
    health.value = math.max(0, health.value + delta)

    if oldMax ~= health.max then
      printToAll("MaxHP of " .. self.getName() .. ": " .. health.max
        .. " (" .. sign .. delta .. ")",
        stringColorToRGB(playerColor))
    end

  else
    health.value = math.max(0, health.value + delta)
    health.value = math.min(health.max, health.value)

    if oldHP ~= health.value then
      printToAll("HP of " .. self.getName() .. ": " .. health.value
        .. " (" .. sign .. delta .. ")",
        stringColorToRGB(playerColor))
    end

    if oldHP > health.value then
      instances.inv.call("onMarineWounded", utils.getColor(self.getName()))
    end
  end

  updateHealthUI()
end

-- Sets health in the UI
function updateHealthUI()
   -- Activate defeat interface
   if health.value < 1 then
      self.UI.setAttribute("defeatPanel", "active", true)
      self.UI.setAttribute("healthbar", "active", false)
      self.UI.setAttribute("editButton", "active", false)
   else
      self.UI.setAttribute("defeatPanel", "active", false)
      self.UI.setAttribute("healthbar", "active", true)
      self.UI.setAttribute("editButton", "active", true)
   end

   self.UI.setAttribute("progressBar", "percentage", health.value / health.max * 100)
   self.UI.setAttribute("healthbar", "text", health.value .. "/" .. health.max)
   self.setDescription(health.value .. "/" .. health.max)
   self.UI.setAttribute("panel", "position", "0 0 -" .. self.getBounds().size.y / self.getScale().y * 110)
end

function singleCustomizationClick(params)
  if not isUIElementActive("healthAddPanel") then
    broadcastToColor("Use doubleclick on healthbar to adjust max hp and armor",
      params.color, params.color)
  else
    -- turning of with single click is also ok
    toggleCustomizationUI()
  end
end

function toggleCustomizationUI()
   -- Toggle max health modifier panel
   toggleUIActivity("healthAddPanel")
   toggleUIActivity("healthSubPanel")

   -- Toggle armor value buttons
   toggleUIActivity("addArmor")
   toggleUIActivity("subArmor")
end

-- Toggle the customization interface (armor, max health)
function onCustomizationUiClick(player, value, id)
  instances.click.call("handleClickByType",
    {color = player.color,
    id = id..self.getGUID(),
    owner = self,
    single = "singleCustomizationClick",
    parametersSingle = {color=player.color},
    double = "toggleCustomizationUI",
  })
end

-- isUIElementActive(string:elementID)
-- Returns boolean:True if element attribute "active" matches "True" or "true"
-- Returns boolean:False for all other circumstances
function isUIElementActive(elementID)
   local attributeValue = self.UI.getAttribute(elementID, "active")
   return (attributeValue == "True") or (attributeValue == "true")
end

-- toggleUIActivity(string:elementID, boolean:state)
-- Set "active" attribute of UI element to given boolean value
function toggleUIActivity(elementID, state)
   if state == nil then state = not isUIElementActive(elementID) end
   self.UI.setAttribute(elementID, "active", state)
   self.UI.setAttribute(elementID, "textColor", "White")
end


-- Change armor value
function addArmor(player, value, id) changeArmor(player.color, 1) end
function subArmor(player, value, id) changeArmor(player.color, -1) end
function changeArmor(player_color, delta)
  instances.inv.call("onArmorBaseChange", {marineColor=utils.getColor(self.getName()),
    delta=delta,
    actorColor=player_color})
end

-- Summon marker, move figure away,  restore hp, notify inventory to do the rest
function defeatClick(player, value, id)
  health.value = health.max
  updateHealthUI()

  local color = utils.getColor(self.getName())
  local deathTokenPos = self.getPosition()
  -- without this correction, token is spawned slightly in air
  deathTokenPos.y = deathTokenPos.y - 0.03
  resetPosition()

  instances.inv.call("onMarineDeath", color)

  local elem = {name="Frag Location", position = deathTokenPos, rotation = {0,0,0}}
  instances.creator.call("spawnElement", {elem=elem, lock=true})
end

function resetPosition()
  local color = utils.getColor(self.getName())
  self.setPositionSmooth(initialLocation[color].pos, false, false)
  self.setRotationSmooth(initialLocation[color].rot, false, false)
end

function onArmorSet(armorValue)
  self.UI.setAttribute("armor", "text", armorValue)
end

function onOrderChange(newOrder)
  if not newOrder then
    self.UI.setAttribute("orderImage", "active", "false")
  else
    self.UI.setAttribute("orderImage", "active", "true")
    self.UI.setAttribute("orderImage", "image", newOrder)
  end
end

function onStepCountUpdate(req)
  if not req or req.steps == 0 then
    self.UI.setAttribute("speedPanel", "active", "false")
  else
    self.UI.setAttribute("speedPanel", "active", "true")
    self.UI.setAttribute("speed", "text", req.steps)
  end
end

function resetHealth(difficulty)
  health.max = 11 - utils.getMarineCount() + startingHealthModifier[difficulty]
  health.value = health.max
  updateHealthUI()
end