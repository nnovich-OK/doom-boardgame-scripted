utils = {}
local package = utils

-- PACKAGE IMPORT
setmetatable(utils, {__index = _G})
local constants = require "constants"
local dbg = require "dbg"

-- PACKAGE BODY
local _ENV = package

-- Variables
local marines = {}
local guideGUID = ""

-- Local methods declaration

function getMarine(color)
  if #marines == 0 then
    for _,obj in ipairs(getAllObjects()) do
      if isMarine(obj) then
        local objColor = getColor(obj.getName())
        marines[objColor] = obj.getGUID()
      end
    end
  end
  return getObjectFromGUID(marines[color])
end

function getMarineCount()
  local count = 0
  for _, clr in ipairs(constants.allMarineColors) do
    if Player[clr].seated or dbg.cfg.pretendAllMarinesSeated then
      count = count + 1
    end
  end

  return math.max(1, count)
end


function setTableDefaultValue(table, value)
  local key = {}
  local mt = getmetatable(table) or {}
  mt.__index = function(t) return t[key] end
  table[key] = value
  setmetatable(table, mt)
end

function isSingleFigurine(obj)
  -- Tag should be Figurine, but TTS apparently might set tag to Generic on first frame
  return (obj.tag == "Figurine" or obj.tag == "Generic") and obj.getQuantity() == -1
end

function isMonster(obj)
  if not isSingleFigurine(obj) then
    return false
  end

  return getMonsterType(obj.getName()) ~= nil
end

function isMarine(obj)
  if not isSingleFigurine(obj) then
    return false
  end

  return (string.find(obj.getName(), "Marine", 1, true) ~= nil)
end

function isCharacter(obj)
  return isMonster(obj) or isMarine(obj)
end

function isDoor(obj)
  return obj.tag == "Generic" and string.find(obj.getName(), "Door") ~= nil
end

function isMapTile(obj)
  return obj.tag == "Generic" and string.find(obj.getName(), "Map") ~= nil
end

function isAmmoToken(obj)
  return obj.tag == "Card" and
    (string.find(obj.getName(), "Shells/Bullets") ~= nil
    or string.find(obj.getName(), "Rockets/Grenades") ~= nil
    or string.find(obj.getName(), "Energy Cell") ~= nil)
end

function isTeleporter(obj)
  return obj.tag == "Card" and string.find(obj.getName(), "Teleporter") ~= nil
end

function isBarrel(obj)
  return obj.tag == "Card" and string.find(obj.getName(), "Barrel") ~= nil
end

function isDuct(obj)
  return obj.tag == "Card" and string.find(obj.getName(), "Duct") ~= nil
end

function isObstacleToken(obj)
  return (obj.tag == "Card" or obj.tag == "Generic") and
    (string.find(obj.getName(), "Obstacle") ~= nil
    or string.find(obj.getName(), "Barrel") ~= nil
    or string.find(obj.getName(), "Duct") ~= nil)
end

function isCompassToken(obj)
  return obj.tag == "Card" and string.find(obj.getName(), "Compass") ~= nil
end

function isFragToken(obj)
  return obj.tag == "Card" and string.find(obj.getName(), "Frag Location") ~= nil
end

function isEncounterToken(obj)
  return (obj.tag == "Card" or obj.tag=="Generic") and string.find(obj.getName(), "Encounter") ~= nil
end

function isInvisibleToken(obj)
  return obj.tag == "Generic" and string.find(obj.getName(), "Invisible Encounter") ~= nil
end

function isPickableToken(obj)
  return (obj.tag == "Card" or obj.tag=="Generic") and constants.pickableTokens[obj.getName()] ~= nil
end

function isToken(obj)
  return (obj.tag == "Card" or obj.tag=="Generic") and constants.tokenList[obj.getName()]
end

function isDeckOfTokens(obj)
  if obj.tag ~= "Deck" or obj.getQuantity() == -1 then
    return false
  end

  for _, innerObj in ipairs(obj.getObjects()) do
    if not constants.tokenList[innerObj.name] then
      return false
    end
  end

  return true
end


-- recursion is internal parameter, shouldn't be used from outside
function getColor(str, recursion)
  for _, clr in ipairs(constants.allPlayerColors) do
    if string.find(str, clr, 1, true) then
      -- ensure it's the only color present in str
      if not recursion and getColor(string.gsub(str, clr, "", 1), true) then
        log(str, "ERROR getColor is used on string with two colors")
        return nil
      else
        return clr
      end
    end
  end

  return nil
end

function getActorLabel(color)
  return Player[color].steam_name or getMarine(color).getName()
end

-- should be applied to strings like "myXmlFieldRed" to remove "Red"
function stripXmlFieldColor(str)
  for _, clr in ipairs(constants.allPlayerColors) do
    if string.find(str, clr.."$") then
      return string.gsub(str, clr.."$", ""), clr
    end
  end
  return str
end


-- return true if figure is 2 or more spaces width in direction of X and Z
function isLargeDimensions(figure)
  local bounds = figure.getBounds()
  return {
    x = (bounds.size.x > 1.5),
    z = (bounds.size.z > 1.5)
  }
end

function isLarge(figure)
  local isLargeDim = isLargeDimensions(figure)
  return isLargeDim.x and isLargeDim.z
end

function getDistance(first, second)
  local roundingDelta = {x = 0.5, z = 0.5}

  local position = {first.getPosition(), second.getPosition()}

  for i, figure in ipairs({first, second}) do
    local isLargeDimensionsFigure = isLargeDimensions(figure)
    if isLargeDimensionsFigure.x then
      roundingDelta.x = roundingDelta.x - 0.5
    end

    if isLargeDimensionsFigure.z then
      roundingDelta.z = roundingDelta.z - 0.5
    end

    if isLargeDimensionsFigure.x ~= isLargeDimensionsFigure.z then
      -- special handling for demon, since its position doesn't corresponsd to geometric center
      -- current position is center of head cell
      -- correct, so we use geometric center instead
      local angle = figure.getRotation().y * math.pi / 180
      position[i].x = position[i].x + 0.5 * math.cos(angle)
      position[i].z = position[i].z - 0.5 * math.sin(angle)
    end
  end

  local dx = math.floor(math.abs(position[2].x - position[1].x) + roundingDelta.x)
  local dz = math.floor(math.abs(position[2].z - position[1].z) + roundingDelta.z)

  return math.max(dx, dz)
end

-- only x and z values of position are meaningful
function getObjectAt(position, filter)
  position = Vector(position)
  position.y = 10
  local objects = getObjectsBelow(position, filter)

  if #objects > 1 then
    log(objects, "ERROR getObjectAt found several objects")
  end

  -- this is nil for empty table and proper object otherwise
  return objects[1]
end

function getObjectsBelow(position, filter)
  local hitTable = Physics.cast(
    {origin=position, direction={0,-1,0}, debug=false, max_distance=10})

  local result = {}
  for _, hit in ipairs(hitTable) do
    if filter(hit.hit_object) then
      table.insert(result, hit.hit_object)
    end
  end

  return result
end

function getObjectsInZone(position, rotation, size, filter)
  -- prevent getting objects, which only touch border by reducing actual size
  reducedSize = Vector(size) - Vector(0.5, 0.5, 0.5)
  local hitTable = Physics.cast(
    {type=3, origin=position, size=reducedSize, orientation=rotation,
      direction={0,1,0}, maxDistance=0, debug=false})

  local result = {}
  for _, hit in ipairs(hitTable) do
    if filter(hit.hit_object) then
      table.insert(result, hit.hit_object)
    end
  end

  return result
end

function isAboveMap(obj)
  local castPosition = obj.getPosition()
  if isLarge(obj) then
    -- for large creatures cast from center of any square instead of center of full figurine
    -- this way even standing above connection of two pieces will still be reported as above map
    -- despite figurine center is directly above crack
    castPosition.x = castPosition.x + 0.5
    castPosition.z = castPosition.z + 0.5
  end

  return #getObjectsBelow(castPosition, isMapTile) ~= 0
end

function getGuide()
  local guide = getObjectFromGUID(guideGUID)
  if guide then
    return guide
  end

  for _, obj in ipairs(getAllObjects()) do
    if obj.getName() == "Invader Player Guide" then
      guideGUID = obj.getGUID()
      return obj
    end
  end
end

-- gets table with x,y,z keys and shifts value for key y according to parameter
-- for tables with 1,2,3 shifts the second value
function shiftY(vector, shift)
  local result = vector
  if result.y then
    result.y = result.y + shift
  elseif result[2] then
    result[2] = result[2] + shift
  end
  return result
end

-- remove trailing, leading and double pipes
-- "|Red||White|Blue|" becomes "Red|White|Blue"
function fixPipes(str)
  --trim
  local trimmed = string.gsub(str or "", "^|*(.-)|*$", "%1")
  --remove doulbes
  return (string.gsub(trimmed, "||+", "|"))
end

function getMonsterType(fullName)
  for type in pairs(constants.mnstStats) do
    if string.find(fullName, type) then
      return type
    end
  end

  return nil
end

function getMonsterStats(name)
  for k,v in pairs(constants.mnstStats) do
    if (string.find(name, k, 1, true)) then
      return v
    end
  end
end

function isMarineColor(color)
  if not Player[color]
    or (not Player[color].seated and not dbg.cfg.pretendAllMarinesSeated)
  then
    return false
  end

  for _, clr in ipairs(constants.allMarineColors) do
    if clr == color then
      return true
    end
  end

  return false
end

return package
