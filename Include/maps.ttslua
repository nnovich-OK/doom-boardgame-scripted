maps = {}
local package = maps

-- PACKAGE IMPORT
local JSON = JSON
local pairs = pairs
local print = print
local setmetatable = setmetatable
local maps = maps

-- PACKAGE BODY
local _ENV = package

-- Variables

-- Local methods declaration
local loadAreas

maps["Episode 1"] = {
  notes = "The first half of official 10 maps campaign. The secodn one requires expansion set.",
  guide = "https://www.dropbox.com/s/0rs2ev6j9r9ohrn/Doom_ep_1_web.pdf?dl=1",
  scenarios = {
    ["Knee Deep in the Dead"] = {
      guidePage = 0,
      areasJSON = require("maps/episode 1/knee deep in the dead").map,
    },

    ["The Shores of Hell"] = {
      guidePage = 1,
      areasJSON = require("maps/episode 1/the shores of hell").map,
    },

    ["Inferno"] = {
      guidePage = 2,
      areasJSON = require("maps/episode 1/inferno").map,
    },

    ["Thy Flesh Consumed"] = {
      guidePage = 3,
      areasJSON = require("maps/episode 1/thy flesh consumed").map,
    },

    ["...And Hell Followed"] = {
      guidePage = 4,
      areasJSON = require("maps/episode 1/and hell followed").map,
    },
  }
}

maps["Mines of Mars"] = {
  notes = "Fan-made single map scenario by Knuckles Eki.",
  guide = "http://cloud-3.steamusercontent.com/ugc/1669108591173352598/FB24ABE1C7D883E34EFA5C3D574996EBED5BBE7F/",
  scenarios = {
    ["Mines of Mars"] = {
      guidePage = 0,
      areasJSON = require("maps/mines of mars/mines of mars").map,
    },
  }
}

maps["The Abandoned Lab"] = {
  notes = [[
Fan-made single map scenario by Knuckles Eki.

This scenario is intended for 1 marine and 1 invader player ONLY!
]],
  guide = "http://cloud-3.steamusercontent.com/ugc/1653346493339060263/B942BD9A23201EA4E17D14769D5296D4D93D667F/",
  scenarios = {
    ["The Abandoned Lab"] = {
      guidePage = 0,
      areasJSON = require("maps/the abandoned lab/the abandoned lab").map,
    },
  }
}

maps["Rescue of the Scientist"] = {
  notes = [[
Fan-made single map scenario by Knuckles Eki.
]],
  guide = "http://cloud-3.steamusercontent.com/ugc/1653346493339243019/8C974F5AB5C9BAFCB9BC459DD7B04D4AB33D028D/",
  scenarios = {
    ["Rescue of the Scientist"] = {
      guidePage = 0,
      areasJSON = require("maps/rescue of the scientist/rescue of the scientist").map,
    },
  }
}


maps["Doom Maps Damoqles part 1"] = {
  notes = [[
Fan-made standalone maps by Damoqles:
"Small but vicious, and/or larger, dense and brutal, but not necessarily impossible standalone maps. :)
NOT intended to be played continuously as a campaign.
Recommended mods: Organized Marines, Well-Trained, Unending Pistols."
]],
  guide = "http://cloud-3.steamusercontent.com/ugc/1669108591180239052/FF33C1D2C9A0B2CE89FAF23BF086BD7A44989DFA/",
  scenarios = {
    ["Map 1"] = {
      guidePage = 1,
      areasJSON = require("maps/damoqles part1/damoqles1").map,
    },

    ["Map 2"] = {
      guidePage = 2,
      areasJSON = require("maps/damoqles part1/damoqles2").map,
    },

    ["Map 3"] = {
      guidePage = 3,
      areasJSON = require("maps/damoqles part1/damoqles3").map,
    },

    ["Map 4"] = {
      guidePage = 4,
      areasJSON = require("maps/damoqles part1/damoqles4").map,
    },
  }
}

function loadAreas(t, k)
  if k == "areas" then
    t[k] = JSON.decode(t["areasJSON"])
    return t[k]
  end
end

for _, campaign in pairs(maps) do
  for _, scenario in pairs(campaign.scenarios) do
    setmetatable(scenario, {__index = loadAreas})
  end
end

return package
