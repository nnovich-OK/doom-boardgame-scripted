require("instances")
require("utils")
require("constants")

local saveData = {}
local score = {Red=0, Green=0, Blue=0}
local readiness = {}
local armorUpgraded = {}

local upgradeCost = {
  heal = 5,
  shell = 10,
  rocket = 15,
  cell = 20,
  maxhp = 25,
  armor = 60,
  skill = 65,
}


-- Local methods declaration
local setReadiness
local checkAllReady
local updateScoreUi
local updateTakeArmorButton

function onLoad(save_state)
  if save_state and save_state ~= "" then
    saveData = JSON.decode(save_state)
  end
end


function onPreprocFinished()
  if saveData.score then
    score = saveData.score
    for _, clr in ipairs(constants.allMarineColors) do
      updateScoreUi(clr)
    end
  end

  if saveData.armorUpgraded then
    armorUpgraded = saveData.armorUpgraded
    for _, clr in ipairs(constants.allMarineColors) do
      updateTakeArmorButton(clr)
    end
  end

end

function onSave()
  self.script_state = JSON.encode({score=score, armorUpgraded=armorUpgraded})
end

function changeScore(req)
  if not req or not req.color or not req.delta then
    log(req, "ERROR changeScore incorrect request")
    return
  end

  if req.delta == 0 then
    return
  end

  newScore = score[req.color] + req.delta
  if newScore < 0 then
    return false
  else
    score[req.color] = newScore
    updateScoreUi(req.color)

    local sign = req.delta > 0 and "+" or "" -- minus will be printed anyway
    local msg = utils.getActorLabel(req.color) .. " score: " .. newScore
      .. " (" .. sign .. tostring(req.delta) .. ")"

    printToAll(msg, req.color)
  end

  return true
end

function updateScoreUi(color)
  Global.UI.setAttribute("scoreText"..color, "text", score[color])
  Global.UI.setAttribute("scoreInput"..color, "text", score[color])
end

function onScoreEdit(player, value, id)
  if value == "" then
    value = "0"
  end

  local field, color = utils.stripXmlFieldColor(id)
  score[color] = tonumber(value, 10)
  updateScoreUi(color)

  printToAll(utils.getActorLabel(color) .. " score: " .. score[color] .. " (manual change)", color)
end

function resetScore()
  for _, clr in ipairs(constants.allMarineColors) do
    score[clr] = 0
    updateScoreUi(clr)
  end
end

function onLevelUpClick(player, value, id)
  for _, clr in ipairs(constants.allPlayerColors) do
    setReadiness(clr, false)
  end
  instances.vis.call("toggleInterface", {color=player.color, id="lvlupMenu"})
end

function onLevelUpBackClick(player, value, id)
  instances.vis.call("hideInterface", {color=player.color, id="lvlupMenu"})
end

function onReadyClick(player, value, id)
  setReadiness(player.color, not readiness[player.color])
  local status = readiness[player.color] and "ready!" or "NOT ready..."
  broadcastToAll(utils.getActorLabel(player.color).." is " .. status, player.color)

  if checkAllReady() then
    instances.vis.call("hideInterface", {color=player.color, id="lvlupMenu"})
    instances.map.call("loadNextScenario", "White")
  end
end

function setReadiness(color, value, quiet)
  readiness[color] = value
  Global.UI.setAttribute("readyTick"..color, "text", value and "âœ“" or "...")
end

function checkAllReady()
  for _, clr in ipairs(constants.allPlayerColors) do
    if Player[clr].seated and not readiness[clr] then
      return false
    end
  end

  return true
end

function onUpgradeClick(player, value, id)
  local upgrade = string.lower(string.gsub(id, "lvlupTake", ""))

  if score[player.color] < upgradeCost[upgrade] then
    broadcastToColor("Not enough kill points", player.color, player.color)
    return
  end

  local msg = utils.getActorLabel(player.color) .. " takes " .. upgrade .. " for "
    .. upgradeCost[upgrade] .. " points"
  local performed = true

  if upgrade == "heal" or upgrade == "maxhp" then
    local marine = utils.getMarine(player.color)
    if upgrade == "heal" and marine.call("isFullHp") then
      broadcastToColor("Already at full health", player.color, player.color)
      performed = false
    end
    if performed then
      broadcastToAll(msg, player.color)
      marine.call("onUpgrade", upgrade)
    end

  elseif upgrade == "shell" or upgrade == "rocket" or upgrade == "cell" then
    performed = instances.inv.call("getItemCount", {color=player.color, item=upgrade}) < 3
    if performed then
      broadcastToAll(msg, player.color)
      instances.inv.call("gainItem", {marineColor=player.color, item=upgrade, actorColor=player.color})
    else
      broadcastToColor("Already carrying 3 or more", player.color, player.color)
    end

  elseif upgrade == "armor" then
    broadcastToAll(msg, player.color)
    instances.inv.call("onArmorBaseChange", {
      delta=1, marineColor=player.color, actorColor=player.color})
    armorUpgraded[player.color] = true
    updateTakeArmorButton(player.color)


  elseif upgrade == "skill" then
    broadcastToAll(msg, player.color)
    printToAll("Please deal skill card manually", player.color)

  end

  if performed then
    changeScore({color=player.color, delta=-upgradeCost[upgrade]})
  end
end

function updateTakeArmorButton(clr)
  if armorUpgraded[clr] then
    instances.vis.call("hideInterface", {color=clr, id="lvlupTakeArmor"})
    instances.vis.call("showInterface", {color=clr, id="lvlupArmorUpgraded"})
  else
    instances.vis.call("showInterface", {color=clr, id="lvlupTakeArmor"})
    instances.vis.call("hideInterface", {color=clr, id="lvlupArmorUpgraded"})
  end
end
