require("instances")
require("utils")

local attackingCandidate = nil
local activeMonster = nil
local monsterPickPosition = nil

local mnstCount = {
  Zombie     = 4,
  Trite      = 4,
  Imp        = 4,
  Demon      = 2,
  Mancubus   = 2,
  Archvile   = 2,
  Hellknight = 2,
  Cyberdemon = 1,
}

-- Local methods declaration
local getNameAndColor
local getBagDetails

-- returns non-empty name only for monsters
function getNameAndColor(fullname)
  local name = ""
  local color = ""

  for k in pairs(mnstCount) do
    if string.find(fullname, k, 1, true) then
      name = k
      break
    end
  end

  for _, v in ipairs({"Red", "Green", "Blue"}) do
    if string.find(fullname, v, 1, true) then
      color = v
      break
    end
  end

  return name, color
end

function getBagDetails(fullname)
  local details = {}

  details.name, details.color = getNameAndColor(fullname)

  for k in string.gmatch(fullname, "x(%d+)") do
    details.count = tonumber(k)
    break
  end

  return details
end


function onObjectLeaveContainer(container, object)
  local details = getBagDetails(container.getName())
  if details.name == "" then
    return
  end

  if details.count == 0 then
    broadcastToAll("No figures left of ".. details.color .. " " .. details.name, Color.Oragne)
    object.setName("")
    object.destruct()
    return
  end

  container.setName(details.color .. " " .. details.name .. " x" .. (details.count-1))
  object.setName(details.color .. " " .. details.name)

  object.UI.setXml(instances.monster.UI.getXml())
  Wait.frames(
    function()
      object.UI.setAttribute("panel", "active", "true")
    end,
    1)

  object.setLuaScript(instances.monster.getLuaScript())
end

function onObjectDestroy(obj)
  local name, color = getNameAndColor(obj.getName())
  if name == "" then return end

  -- find related bagw
  for _,bag in ipairs(getAllObjects()) do
    if bag.getQuantity() ~= -1 then
      local bagDetails = getBagDetails(bag.getName())
      if bagDetails.name == name and bagDetails.color == color then
        bagDetails.count = bagDetails.count+1
        if bagDetails.count > mnstCount[name] then
          bagDetails.count = mnstCount[name]
        end
        bag.setName(bagDetails.color .. " " .. bagDetails.name .. " x" .. bagDetails.count)
      end
    end
  end
end

function onAttackerSet(req)
  if Turns.enable
    and Turns.turn_color == "White"
    and req.color == "White"
    and req.attacker
    and utils.isMonster(req.attacker)
  then
    attackingCandidate = req.attacker
  end
end

function onRollStart(color)
  if Turns.enable
    and Turns.turn_color == "White"
    and color == "White"
    and attackingCandidate
  then
    setActiveMonster(attackingCandidate)
    attackingCandidate = nil
  end
end

function onPlayerTurnEnd(turnColor, nextTurnColor)
  if turnColor == "White" then
    activeMonster = nil
    attackingCandidate = nil
    monsterPickPosition = nil
  end
end

function setActiveMonster(monster)
  if monster ~= activeMonster then
    if activeMonster then
      activeMonster.call("onActivationChange", false)
    end
    activeMonster = monster
    if not activeMonster.call("onActivationChange", true) then
      activeMonster = nil
    end
  end
end

function onObjectPickUp(player_color, obj)
  if player_color == "White"
  then
    if Turns.enable
      and Turns.turn_color == "White"
      and utils.isMonster(obj)
      and utils.isAboveMap(obj)
    then
      monsterPickPosition = obj.getPosition()
    else
      monsterPickPosition = nil
    end
  end
end

function onObjectDrop(player_color, obj)
  if Turns.enable
    and Turns.turn_color == "White"
    and player_color == "White"
    and utils.isMonster(obj)
    and utils.isAboveMap(obj)
    and monsterPickPosition
  then
    local pos = obj.getPosition()
    if math.abs(monsterPickPosition.x - pos.x) > 0.5
      or math.abs(monsterPickPosition.z - pos.z) > 0.5
    then
      setActiveMonster(obj)
    end
    monsterPickPosition = nil
  end
end

function onManualClearActive(monster)
  if monster == activeMonster then
    activeMonster = nil
  end
end
