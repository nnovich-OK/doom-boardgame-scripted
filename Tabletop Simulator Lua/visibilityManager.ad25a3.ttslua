local lastActiveInvForWhite = nil -- stores color only

local interfaceGroups = {
  inventoryPanelRed="inventory",
  inventoryPanelGreen="inventory",
  inventoryPanelBlue="inventory",
}

-- Local methods declaration
local interfaceRequestCorrect
local hideOtherInterfacesInGroup
local fixPipes
local changeVisibility
local handleSpecialCases
local isActive

function interfaceRequestCorrect(req)
  return req and req.id and req.color
end


function hideOtherInterfacesInGroup(req)
  local groupToHide = interfaceGroups[req.id]

  if groupToHide then
    for interface, group in pairs(interfaceGroups) do
      if interface ~= req.id and group == groupToHide then
        changeVisibility(interface, req.color, "rem")
      end
    end
  end
end

function handleSpecialCases(req, mode)
  local fieldName, fieldColor = Global.call("stripXmlFieldColor", req.id)

  if fieldName == "inventoryPanel" then
    -- update inventory control buttons visibility

    if req.color == "White" then
      if mode == "add" or (mode == "tgl" and not isVisible(req)) then
        -- show panel
        changeVisibility("inventoryModePanel"..req.color, req.color, "add")

        -- show proper "giveToColorItem" buttons
        for _, clr in ipairs(Global.getTable("allMarineColors")) do
          local buttonMode = "add"
          if clr == fieldColor then
            buttonMode = "rem"
            lastActiveInvForWhite = clr
          end
          changeVisibility("giveTo" .. clr .. "Item" .. req.color, req.color, buttonMode)
        end
      else
        -- hide full panel
        changeVisibility("inventoryModePanel"..req.color, req.color, "rem")
      end

    else
      -- marine players
      if fieldColor == req.color then
        changeVisibility("inventoryModePanel"..req.color, req.color, mode)
      else
        changeVisibility("inventoryModePanel"..req.color, req.color, "rem")
      end
    end
  end
end

function isActive(id)
  return string.lower(Global.UI.getAttribute(id, "active") or "true") == "true"
end

function isVisible(req)
  local vis = Global.UI.getAttribute(req.id, "visibility") or ""
  return isActive(req.id) and string.find(vis, req.color, 1, true)
end

function showInterface(req)
  if interfaceRequestCorrect(req)
  then
    hideOtherInterfacesInGroup(req)
    handleSpecialCases(req, "add")
    changeVisibility(req.id, req.color, "add")
  end
end

function hideInterface(req)
  if interfaceRequestCorrect(req)
  then
    handleSpecialCases(req, "rem")
    changeVisibility(req.id, req.color, "rem")
  end
end

function toggleInterface(req)
  if interfaceRequestCorrect(req)
  then
    hideOtherInterfacesInGroup(req)
    handleSpecialCases(req, "tgl")
    changeVisibility(req.id, req.color, "tgl")
  end
end

-- remove trailing, leading and double pipes
-- "|Red||White|Blue|" becomes "Red|White|Blue"
function fixPipes(str)
  --trim
  local trimmed = string.gsub(str or "", "^|*(.-)|*$", "%1")
  --remove doulbes
  return (string.gsub(trimmed, "||+", "|"))
end

-- mode is add/rem/tgl
function changeVisibility(id, color, mode)
  local visBase = Global.UI.getAttribute(id, "visibility") or ""
  local textColor = Global.UI.getAttribute(id, "textColor")

  local vis = visBase
  for color in string.gmatch(color, "[^|]+") do
    if not string.find(vis, color, 1, true) then
      if mode == "add" or mode == "tgl" then
        vis = (vis) .. "|" .. color
      end
    else
      if mode == "rem" or mode == "tgl" then
        vis = string.gsub(vis, color, "")
      end
    end
  end

  vis=fixPipes(vis)
  --log(
  --  (visBase or "") .. " => " .. (vis),
  --  mode .. " visibility of " .. id .. " for " .. color .. ":")

  if vis~=visBase then
    Global.UI.setAttribute(id, "visibility", fixPipes(vis))
  end

  local act = isActive(id)
  if not act and vis and vis ~= "" then
    Global.UI.setAttribute(id, "active", "true")
  elseif act and (not vis or vis == "") then
    Global.UI.setAttribute(id, "active", "false")
  end

  if textColor then
    -- changes to visibility clears text color for some reason
    Global.UI.setAttribute(id, "textColor", textColor)
  end
end

function getActiveInventoryForWhite()
  if isVisible({id = "inventoryPanel" .. lastActiveInvForWhite, color = "White"}) then
    return lastActiveInvForWhite
  else
    log("ERROR no active inventory for white player at this time")
    return nil
  end
end