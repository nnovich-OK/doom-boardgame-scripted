require("utils")
require("constants")

pathTrackingEnabled = true

local pathTrackingFrame = 0
local pathTrackingRate = 1
local mapUpdateFrame = 0
local mapUpdateRate = 120 -- depending on framerate this is 1 to 10 secs which is fine

local trailHeight = 1.35
local pathPointApprox = 0.6

local trailClearTimer = nil

local trailColors = {
  "Green",
  "Yellow",
  "Red",
}
setmetatable(trailColors, {__index = function() return "White" end})

local tracked = {}
local lingeringTrails = {}

-- allow vector as key in the table, so we have "someMap[position] = objectData"
-- two vectors as keys with different memory addresses but same content should lead to the same table value
local metaMap = {
  __index = function(t, k)
    local tx = rawget(t, k.x)
    return tx and tx[k.z]
  end,
  __newindex = function(t, k, v)
    local tx = rawget(t, k.x)
    if not tx then
      rawset(t, k.x, {[k.z] = v})
    else
      tx[k.z] = v
    end
  end,
}
local teleporterMap = {}
local ductMap = {}
setmetatable(teleporterMap, metaMap)
setmetatable(ductMap, metaMap)

-- Local methods declaration
local addPathToTrails
local positionToPathPoint
local cutPath
local trackObject
local updatePaths
local updateMaps
local performAssignment

function onUpdate()
  if not pathTrackingEnabled or not Turns.enable then
    return
  end

  pathTrackingFrame = pathTrackingFrame + 1
  if pathTrackingFrame >= pathTrackingRate then
    pathTrackingFrame = 0
    updatePaths()
  end

  mapUpdateFrame = mapUpdateFrame + 1
  if mapUpdateFrame >= mapUpdateRate then
    mapUpdateFrame = 0
    updateMaps()
  end
end

function updatePaths()
  for _, tracker in pairs(tracked) do
    if tracker.inMotion then
      local newPoint = positionToPathPoint(tracker.object.getPosition(), tracker.large)
      if newPoint then
        if cutPath(tracker.path, function(point) return point == newPoint end) then
          -- we already had such point in path before, all points after are removed
          drawTrails()
        else
          -- completely new point
          -- check ducks and teleporters
          local continious = true
          if tracker.scuttle and ductMap[newPoint]
            and cutPath(tracker.path, function(point) return ductMap[point] end)
          then
            continious = false
          elseif tracker.teleport and teleporterMap[newPoint]
            and cutPath(tracker.path, function(point) return teleporterMap[point] == teleporterMap[newPoint] end)
          then
            continious = false
          end

          if not continious then
            -- jump from one location to another
            table.insert(tracker.path, newPoint)
            drawTrails()
          else
            -- simple move, check distance
            local between = Vector.between(newPoint, tracker.path[#tracker.path])
            if math.abs(between.x) <= 1.1 and math.abs(between.z) <= 1.1 then
              table.insert(tracker.path, newPoint)
              drawTrails()
            end
          end
        end
      end
    end
  end
end

function drawTrails()
  local trails = {}
  for _, tracker in pairs(tracked) do
    addPathToTrails(tracker.path, tracker.speed, tracker.travelled, trails)
  end
  for _, trail in ipairs(lingeringTrails) do
    table.insert(trails, trail)
  end
  Global.setVectorLines(trails)
end

function onPlayerTurnEnd(colorEnd, colorNext)
  tracked = {}
  lingeringTrails = {}

  if pathTrackingEnabled and Turns.enable then
    drawTrails()
  end
end

function onObjectPickUp(player_color, object)
  if not pathTrackingEnabled
    or not Turns.enable
    or not utils.isCharacter(object)
    or not utils.isAboveMap(object)
  then
    return
  end

  local pathPoint = positionToPathPoint(object.getPosition(), utils.isLarge(object))

  if not pathPoint then
    log(object.getPosition(), "WTF! lifted object has wrong path point")
    return
  end

  trackObject(object)
  tracked[object.getGUID()].inMotion = true
  tracked[object.getGUID()].path = {pathPoint}
end

function onObjectDrop(player_color, dropped_object)
  -- probably this is fine even when turns/paths disabled
  -- it gives closure to objects already in air
  local guid = dropped_object.getGUID()
  if tracked[guid] then
    tracked[guid].inMotion = false
    addPathToTrails(tracked[guid].path, tracked[guid].speed, tracked[guid].travelled, lingeringTrails)
    tracked[guid].travelled = tracked[guid].travelled + #tracked[guid].path - 1
    tracked[guid].path = {}

    if trailClearTimer then
      Wait.stop(trailClearTimer)
    end
    trailClearTimer = Wait.time(function()
      trailClearTimer = nil
      lingeringTrails = {}
      drawTrails()
    end, 5)
  end
end

function addPathToTrails(path, speed, travelled, trails)
  local colorIndex = 1
  local firstPoint = nil
  -- pretend, that path starts with nonpositive indexes for each already travelled step
  -- these negative indexes will be skipped, but colorIndex will be set properly
  local stepIndex = 1 - travelled
  while(stepIndex + 1 <= #path) do
    local stepFinal = math.min(stepIndex + speed, #path)
    local points = {}
    for i = math.max(stepIndex, 1), stepFinal do
      if not firstPoint then
        -- HACK: TTS changed rendering in version 13, so the first segment of each poligonal line
        -- might be overlapped by other objects even when they are behind
        -- Other segments are fine, so adding small useless segment just to mitigate this issue
        firstPoint = path[i]
        table.insert(trails, {points = {firstPoint - Vector(0,0.001,0.1), firstPoint}, color="Orange"})
      end
      table.insert(points, path[i])
    end

    if #points > 0 then
      table.insert(trails, {points = points, color = trailColors[colorIndex]})
    end

    stepIndex = stepIndex + speed
    colorIndex = colorIndex + 1
  end
end

function positionToPathPoint(pos, isLarge)
  local roundedPos
  if not isLarge then
    roundedPos = Vector(math.floor(pos.x) + 0.5, trailHeight, math.floor(pos.z) + 0.5)
  else
    roundedPos = Vector(math.floor(pos.x + 0.5), trailHeight, math.floor(pos.z + 0.5))
  end

  if math.abs(roundedPos.x - pos.x) + math.abs(roundedPos.z - pos.z) > pathPointApprox then
    -- in between path points
    return nil
  else
    return roundedPos
  end
end

-- searches for the first point to fulfill the condition
-- then remove all points after that
-- returns true if point was found even if it was last
function cutPath(path, condition)
  local cutIndex = -1
  for i = 1, #path do
    if condition(path[i]) then
      cutIndex = i
      break
    end
  end

  if cutIndex ~= -1 then
    for i = 1, #path - cutIndex do
      table.remove(path)
    end
    return true
  else
    return false
  end
end

function onMoveSpent(req)
  if not pathTrackingEnabled or not Turns.enable then
    return
  end

  assert(req.obj and req.move, "onMoveSpent: incorrect request")
  trackObject(req.obj)
  tracked[req.obj.getGUID()].travelled = tracked[req.obj.getGUID()].travelled + req.move
end

function trackObject(object)
  if tracked[object.getGUID()] then
    return
  end

  tracked[object.getGUID()] = {
    object = object,
    path = {},
    speed = utils.isMarine(object) and 4 or utils.getMonsterStats(object.getName()).speed,
    travelled = 0,
    scuttle = (utils.getMonsterType(object.getName()) == "Trite"),
    teleport = utils.isMarine(object),
    large = utils.isLarge(object),
    inMotion = false,
  }
end

function updateMaps()
  ductMap = {}
  teleporterMap = {}
  setmetatable(ductMap, metaMap)
  setmetatable(teleporterMap, metaMap)

  for _, obj in ipairs(getAllObjects()) do
    if utils.isDuct(obj) then
      local pt = positionToPathPoint(obj.getPosition(), false)
      if pt then
        performAssignment(ductMap, pt, true)
      end
    elseif utils.isTeleporter(obj) then
      local pt = positionToPathPoint(obj.getPosition(), false)
      if pt then
        performAssignment(teleporterMap, pt, obj.getName())
      end
    end
  end
end

-- this function is a hack to prevent obscure error "Unexpected LuaType Tuple"
-- apparently Vector from TTS and custom metatable interfere with each other
-- in case both are in the same loop
-- more info: https://forums.tabletopsimulator.com/showthread.php?5540-Cannot-iterate-with-newindex
function performAssignment(t, k, v)
  t[k] = v
end