#include Console/console++

shown = {Red={}, Green={}, Blue={}, White={}}

-- TODO: maybe join mnstList, mnstCount and mnstStats somwhere in one place
mnstList = {
  "Zombie",
  "Trite",
  "Imp",
  "Demon",
  "Mancubus",
  "Archvile",
  "Hellknight",
  "Cyberdemon",
}

function onload()
  -- assets sometimes load later than they are needed by objects
  -- so blank squares are shown instead of images for armor, speed etc
  -- workaround - refresh XML to redraw interfaces
  refreshObjectUI()

  instances().preproc.call("preprocess")
end

function onPlayerConnect(player)
  -- assets sometimes load later than they are needed by objects
  -- so blank squares are shown instead of images for armor, speed etc
  -- workaround - refresh UI for all objects
  -- needed to be done for each player individually
  refreshObjectUI()
end

function instances()
  return {
    calc = getObjectFromGUID("6411e1"),
    hotkeys = getObjectFromGUID("0c9765"),
    preproc = getObjectFromGUID("e8056f"),
    creator = getObjectFromGUID("4abf42"),
  }
end


function interfaceRequestCorrect(req)
  return req and req.id and req.color
end


--TODO group and rework
function showInterface(req)
  if interfaceRequestCorrect(req)
    and not shown[req.color][req.id]
  then
    shown[req.color][req.id] = true
    Global.UI.show(req.id)  --TODO: set visibility
  end
end

function hideInterface(req)
  if interfaceRequestCorrect(req)
    and shown[req.color][req.id]
  then
    shown[req.color][req.id] = false
    Global.UI.hide(req.id)  --TODO: set visibility
  end
end

function toggleInterface(req)
  if interfaceRequestCorrect(req)
  then
    if not shown[req.color][req.id] then
      Global.UI.show(req.id)  --TODO: set visibility
    else
      Global.UI.hide(req.id)
    end
    shown[req.color][req.id] = not shown[req.color][req.id]
  end
end

function refreshObjectUI()
  Wait.time(
    function()
      broadcastToAll("Refreshing object interfaces after new player connected", Color.Orange)
      for _,v in ipairs(getAllObjects()) do
        local xml = v.UI.getXml()
        if xml and xml ~= "" then
          v.UI.setXml(xml)
        end
      end
    end,
    5)
end


function isSingleFigurine(obj)
  return obj.tag == "Figurine" and obj.getQuantity() == -1
end

function isMonster(obj)
  if not isSingleFigurine(obj) then
    return false
  end

  local name = obj.getName()
  for i,v in ipairs(mnstList) do
    if (string.find(name, v, 1, true)) then
      return true
    end
  end

  return false
end

function isMarine(obj)
  if not isSingleFigurine(obj) then
    return false
  end

  return (string.find(obj.getName(), "Marine", 1, true) ~= nil)
end

function isCharacter(obj)
  return isMonster(obj) or isMarine(obj)
end