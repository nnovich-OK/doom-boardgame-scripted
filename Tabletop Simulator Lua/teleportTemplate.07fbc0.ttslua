require("instances")
require("utils")

if string.find(self.getName(), "Template") then
  return
end

local trackedMarine = nil


-- Local methods declaration
local moveMarineFigurine
local findBestRotation


function onLoad(save_state)
  saved_data = JSON.decode(save_state)

  -- XML
  if saved_data and saved_data.xml then
    self.UI.setXml(saved_data.xml)
  else
    self.UI.setXml(instances.teleport.UI.getXml())
  end
end

function onSave()
   local save_state = JSON.encode({xml = self.UI.getXml()})
   self.script_state = save_state
end


function onTeleportClick(player, value, id)
  instances.click.call("handleClickByType",
    {color = player.color,
    id = id..self.getGUID(),
    owner = self,
    single = "askForDoubleClick",
    parametersSingle = {color=player.color},
    double = "teleport",
    parametersDouble = {color=player.color},
  })
end

function askForDoubleClick(params)
  broadcastToColor("Doubleclick to teleport",
    params.color, params.color)
end

function teleport(params)
  local gmNotes = self.getGMNotes()
  if gmNotes and string.find(gmNotes, "Reveal:") then
    instances.map.call("revealArea", {
      area=string.gsub(gmNotes, "Reveal:", ""),
      color=params.color
    })
    self.setGMNotes("")

    -- Wait for the second teleporter to spawn
    Wait.time(function() moveMarineFigurine(params.color) end, 0.5)
  else
    moveMarineFigurine(params.color)
  end
end

function moveMarineFigurine(player_color)
  for _, obj in ipairs(getAllObjects()) do
    if obj.getName() == self.getName()
      and obj.tag == self.tag
      and obj.getGUID() ~= self.getGUID()
    then
      local hitTable = Physics.cast(
        {origin=obj.getPosition(), direction={0,1,0}, debug=false, max_distance=10})

      for _, hit in ipairs(hitTable) do
        if utils.isCharacter(hit.hit_object) then
          broadcastToColor("Destination teleporter is occupied, please move figurine manually",
            player_color, player_color)
          return
        end
      end

      trackedMarine.setPositionSmooth(obj.getPosition())
      self.UI.setAttribute("teleport", "active", "false")
      obj.call("onMarineArrived", trackedMarine)
      trackedMarine = nil
    end
  end
end

function onMarineDrop(obj)
  trackedMarine = obj
  self.UI.setAttribute("teleport", "rotation", findBestRotation(utils.getColor(obj.getName())))
  self.UI.setAttribute("teleport", "active", "true")
  self.UI.setAttribute("teleport", "textColor", "White")
end

function onObjectPickUp(player_color, obj)
  if obj == trackedMarine then
    self.UI.setAttribute("teleport", "active", "false")
    trackedMarine = nil
  end
end

function onMarineArrived(marine)
  trackedMarine = marine
  self.UI.setAttribute("teleport", "rotation", findBestRotation(utils.getColor(marine.getName())))
  self.UI.setAttribute("teleport", "active", "true")
  self.UI.setAttribute("teleport", "textColor", "White")
end

function findBestRotation(marineColor)
  -- rotation around Y vs quadrant index: 0 - 0, 90 - 1, 180 - 2, 270 - 3
  local selfQuadrant = math.floor((self.getRotation().y + 45) / 90)
  local playerFacingQuadrant = 0 -- OK for red
  if marineColor == "Green" then
    playerFacingQuadrant = 3
  elseif marineColor == "Blue" then
    playerFacingQuadrant = 2
  end

  local delta = playerFacingQuadrant - selfQuadrant
  if delta < 0 then
    delta = delta + 4
  end

  local rotations = {
    "270 0 0",
    "0 90 270",
    "90 180 0",
    "0 270 90",
  }

  return rotations[delta + 1]
end