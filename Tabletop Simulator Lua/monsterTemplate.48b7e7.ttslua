require("instances")
require("utils")
require("constants")

if string.find(self.getName(), "Template") then
  return
end

local mnstStats = constants.mnstStats

local identity = {
  fullname = "",
  name = "",
  color = "",
}

local health = {
   value = 10,
   max = 10,
}

-- Local methods declaration
local getIdentity
local createBtns
local updateHealthUI

function getIdentity(name)
  identity.fullname = name

  for k in pairs(mnstStats) do
    if string.find(name, k, 1, true) then
      identity.name = k
    end
  end

  for _, v in ipairs({"Red", "Green", "Blue"}) do
    if string.find(name, v, 1, true) then
      identity.color = k
    end
  end
end

function onLoad(save_state)
  getIdentity(self.getName())

  health.max = mnstStats[identity.name].health
  health.value = health.max

  saved_data = JSON.decode(save_state)

  -- XML
  if saved_data and saved_data.xml then
    self.UI.setXml(saved_data.xml)
  else
    self.UI.setXml(instances.monster.UI.getXml())
  end

  -- Health
  if saved_data and saved_data.health then
    health = saved_data.health
  end

  Wait.frames(
    function()
      self.UI.setAttribute("panel", "active", "true")
      updateHealthUI()
      self.UI.setAttribute("armor", "text", mnstStats[identity.name].armor)
      self.UI.setAttribute("speed", "text", mnstStats[identity.name].speed)
    end,
    3)

  createBtns()
end

function onSave()
  local save_state = JSON.encode({health = health, xml = self.UI.getXml()})
  self.script_state = save_state
end

function createBtns()
  local buttonParameter = {
    click_function = "add",
    function_owner = self,
    position = {0.3, 0.02, -0.2},
    rotation= {0, 90, 0},
    label = "+",
    width = 250,
    height = 250,
    font_size = 300,
    color = {0,0,0,0.1},
    font_color = {1,1,1,7}}
  self.createButton(buttonParameter)
  buttonParameter.position = {0.3, 0.02, 0.2}
  buttonParameter.click_function = "sub"
  buttonParameter.label = "-"
  self.createButton(buttonParameter)
end

function add(self, playerColor, value, id) healthChange(playerColor, "add") end
function sub(self, playerColor, value, id) healthChange(playerColor, "sub") end

function onBarrelExplosion(player_color)
  healthChange(player_color, "sub")
end

function healthChange(playerColor, change)
  local oldHP = health.value

  if change == "add" then
    health.value = health.value + 1
  elseif change == "sub" then
    health.value = health.value - 1
  end

  -- Boundary-check health values
  if health.value > health.max then health.value = health.max end
  if health.value < 0 then health.value = 0 end
  updateHealthUI()

  if change == "add" then
     if oldHP ~= health.value then
        printToAll("HP of " .. self.getName() .. ": " .. health.value .. " (+1)", stringColorToRGB(playerColor))
     end
  elseif change == "sub" then
     if oldHP ~= health.value then
        printToAll("HP of " .. self.getName() .. ": " .. health.value .. " (-1)", stringColorToRGB(playerColor))
     end
  end
end

-- Sets health in the UI
function updateHealthUI()

   -- Activate defeat interface
   if health.value < 1 then
      self.UI.setAttribute("defeatPanel", "active", true)
      self.UI.setAttribute("healthbar", "active", false)
      self.UI.setAttribute("editButton", "active", false)
   else
      self.UI.setAttribute("defeatPanel", "active", false)
      self.UI.setAttribute("healthbar", "active", true)
      self.UI.setAttribute("editButton", "active", true)
   end

   self.UI.setAttribute("progressBar", "percentage", health.value / health.max * 100)
   self.UI.setAttribute("healthbar", "text", health.value .. "/" .. health.max)
   self.setDescription(health.value .. "/" .. health.max)
   self.UI.setAttribute("panel", "position", "0 0 -" .. self.getBounds().size.y / self.getScale().y * 110)
end

function defeatClick(player, value, id)
  printToAll(utils.getActorLabel(player.color).." defeats "..self.getName(), player.color)

  if player.color ~= "White" then
    instances.score.call("changeScore", {color=player.color, delta=mnstStats[identity.name].score})
  else
    printToAll(mnstStats[identity.name].score .. " kill score can be assigned manually", player.color)
  end

  self.destruct()
end

function onActivationChange(active)
  if active then
    if getActiveStatus() == "done" then
      broadcastToAll(self.getName() .. " has already acted this turn", Color.Orange)
      return false
    else
      self.UI.setAttribute("turnStatusButton", "active", "true")
      self.UI.setAttribute("turnStatusImage", "image", "monsterActive")
      return true
    end
  else
    self.UI.setAttribute("turnStatusButton", "active", "true")
    self.UI.setAttribute("turnStatusImage", "image", "monsterDone")
    return true
  end
end

function onPlayerTurnEnd(turnColor, nextTurnColor)
  if turnColor == "White" then
    deactivateTurnStatus()
  end
end

function onTurnStatusClick(player, value, id)
  instances.click.call("handleClickByType",
    {color = player.color,
    id = id..self.getGUID(),
    owner = self,
    single = "askForDoubleClick",
    parametersSingle = {color=player.color},
    double = "deactivateTurnStatus",
    parametersDouble = {manual=true, color=player.color}
  })
end

function onStepCountUpdate(req)
  if not req then
    return
  end
  self.UI.setAttribute("speed", "text", math.max(0, mnstStats[identity.name].speed - req.steps))
end

function askForDoubleClick(params)
  broadcastToColor("Doubleclick on status icon to remove",
    params.color, params.color)
end

function deactivateTurnStatus(params)
  self.UI.setAttribute("turnStatusButton", "active", "false")
  if params and params.manual
  then
    instances.creator.call("onManualClearActive", self)
    instances.path.call("onMoveReset", {obj = self, color = params.color})
  end
end

function getActiveStatus()
  if string.lower(self.UI.getAttribute("turnStatusButton", "active")) == "false" then
    return "ready"
  elseif self.UI.getAttribute("turnStatusImage", "image") == "monsterActive" then
    return "active"
  else
    return "done"
  end
end
