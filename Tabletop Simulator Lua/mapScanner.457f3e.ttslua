require("instances")
require("utils")
require("dbg")

local map={}
local areaName = nil
local hiddenObjects = nil


-- Local methods declaration
local storeObject
local storeDeckOfTokens

function onPreprocFinished()
  if dbg.cfg.scanEnabled then
    instances.vis.call("showInterface", {id = "scannerToggle", color = "White"})
  end
end

function onScanToggle(player, value, id)
  instances.vis.call("toggleInterface", {id = "scanner", color = player.color})
end

function onAreaNameSet(player, value, id)
  areaName = value
end

function onScanClick(player, value, id)
  print("Scanned: ", areaName)

  map[areaName] = {
    mapTiles={},
    doors={},
    teleporters={},
    ammoTokens={},
    otherTokens={},

    marines={},
    greyMonsters={},
    colorMonsters={},
  }

  objects = player.getSelectedObjects()
  for _, obj in ipairs(objects) do
    if utils.isMarine(obj) then
      storeObject(map[areaName].marines, obj)
    elseif utils.isMonster(obj) then
      if string.find(obj.getName(), "Grey") then
        storeObject(map[areaName].greyMonsters, obj)
      else
        storeObject(map[areaName].colorMonsters, obj)
      end
    elseif utils.isMapTile(obj) then
      storeObject(map[areaName].mapTiles, obj)
    elseif utils.isDoor(obj) then
      storeObject(map[areaName].doors, obj)
    elseif utils.isTeleporter(obj) then
      storeObject(map[areaName].teleporters, obj)
    elseif utils.isAmmoToken(obj) then
      storeObject(map[areaName].ammoTokens, obj)
    elseif utils.isToken(obj) then
      storeObject(map[areaName].otherTokens, obj)
    elseif utils.isDeckOfTokens(obj) then
      storeDeckOfTokens(obj)
    else
      broadcastToColor("Uncategorized object: ".. obj.getName().."("..obj.getGUID()..")",
        player.color, player.color)
    end
  end
end

function storeObject(mapTable, object)
  local description = {
    name = object.getName(),
    position = object.getPosition(),
    rotation = object.getRotation(),
  }
  if utils.isDoor(object) then
    description.mark = object.getGUID()
    description.reveal = areaName
  elseif utils.isTeleporter(object) then
    description.mark = object.getName()
    description.reveal = areaName
  end
  table.insert(mapTable, description)
end

function storeDeckOfTokens(deck)
  local deckPos = deck.getPosition()
  local deckRot = deck.getRotation()
  for _, obj in ipairs(deck.getObjects()) do
    local description = {
      name = obj.name,
      position = deckPos,
      rotation = deckRot,
    }

    -- hopefully, stack of tokens is always about equipment
    if (string.find(obj.name, "Shells/Bullets") ~= nil
      or string.find(obj.name, "Rockets/Grenades") ~= nil
      or string.find(obj.name, "Energy Cell") ~= nil)
    then
      table.insert(map[areaName].ammoTokens, description)
    else
      table.insert(map[areaName].otherTokens, description)
    end
  end
end

function onPrintClick(player, value, id)
  local marked = {}
  for areaName, area in pairs(map) do
    for _, type in ipairs({"doors", "teleporters"}) do
      for _, obj in ipairs(area[type]) do
        if obj.mark then
          if not marked[obj.mark] then
            marked[obj.mark] = {}
          end
          table.insert(marked[obj.mark], obj)
        end
      end
    end
  end

  for mark, objects in pairs(marked) do
    if #objects ~= 2 then
      broadcastToColor("WTF! ".. #objects.." objects with mark "..mark, player.color, player.color)
    else
      local tmpReveal = objects[1].reveal
      objects[1].reveal = objects[2].reveal
      objects[2].reveal = tmpReveal

      objects[1].mark = nil
      objects[2].mark = nil
    end
  end

  print(JSON.encode_pretty(map))
end

function onClearClick(player, value, id)
  if instances.click.call("isDoubleClick", {id=id, color=player.color} ) then
    map = {}
    broadcastToColor("Map cleared", player.color, player.color)
  end
end

function onCheckClick(player, value, id)
  if not hiddenObjects then
    hiddenObjects = player.getSelectedObjects()

    for _, obj in ipairs(hiddenObjects) do
      obj.setInvisibleTo({player.color})
    end
  else
    for _, obj in ipairs(hiddenObjects) do
      obj.setInvisibleTo({})
    end
    hiddenObjects = nil
  end
end