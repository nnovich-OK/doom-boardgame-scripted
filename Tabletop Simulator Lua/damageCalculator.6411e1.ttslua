require("instances")
require("constants")
require("utils")

local diceUpdateFrame = 0
local diceUpdateRate = 23 -- 90 physical frames is 1 second
local diceReturnFrame = 0
local diceReturnRate = 45

local redRotationValues = {
  {value="range=3 dmg=1",           rotation={x=0, y=0, z=0}},
  {value="range=0 dmg=4 ammo",      rotation={x=0, y=0, z=90}},
  {value="miss",                    rotation={x=0, y=0, z=180}},
  {value="range=2 dmg=2",           rotation={x=0, y=0, z=270}},
  {value="range=1 dmg=3 ammo",      rotation={x=90, y=0, z=0}},
  {value="range=1 dmg=3",           rotation={x=270, y=0, z=0}},
}

local yellowRotationValues = {
  {value="range=3 dmg=1",           rotation={x=0, y=0, z=0}},
  {value="range=4 dmg=0 ammo",      rotation={x=0, y=0, z=90}},
  {value="miss",                    rotation={x=0, y=0, z=180}},
  {value="range=3 dmg=1 ammo",      rotation={x=0, y=0, z=270}},
  {value="range=1 dmg=3",           rotation={x=90, y=0, z=0}},
  {value="range=2 dmg=2",           rotation={x=270, y=0, z=0}},
}

local greenRotationValues = {
  {value="range=1 dmg=1",           rotation={x=0, y=0, z=0}},
  {value="range=2 dmg=0",           rotation={x=0, y=0, z=90}},
  {value="range=3 dmg=0",           rotation={x=0, y=0, z=180}},
  {value="range=2 dmg=1",           rotation={x=0, y=0, z=270}},
  {value="range=3 dmg=0",           rotation={x=90, y=0, z=0}},
  {value="range=2 dmg=0",           rotation={x=270, y=0, z=0}},
}
local blueRotationValues = {
  {value="range=1 dmg=1",           rotation={x=0, y=0, z=0}},
  {value="range=0 dmg=2",           rotation={x=0, y=0, z=90}},
  {value="range=0 dmg=3",           rotation={x=0, y=0, z=180}},
  {value="range=0 dmg=2",           rotation={x=0, y=0, z=270}},
  {value="range=0 dmg=3",           rotation={x=90, y=0, z=0}},
  {value="range=1 dmg=2",           rotation={x=270, y=0, z=0}},
}


-- weight for duplicated sides
local redDie = {
  "miss",
  {range=0, dmg=4, weight=1},
  {range=1, dmg=3, weight=2},
  {range=2, dmg=2, weight=1},
  {range=3, dmg=1, weight=1},
}

local yellowDie = {
  "miss",
  {range=1, dmg=3, weight=1},
  {range=2, dmg=2, weight=1},
  {range=3, dmg=1, weight=2},
  {range=4, dmg=0, weight=1},
}

local greenDie = {
  {range=1, dmg=1, weight=1},
  {range=2, dmg=1, weight=1},
  {range=2, dmg=0, weight=2},
  {range=3, dmg=0, weight=2},
}

local blueDie = {
  {range=0, dmg=3, weight=2},
  {range=0, dmg=2, weight=2},
  {range=1, dmg=2, weight=1},
  {range=1, dmg=1, weight=1},
}


-- will also store dieObj with reference to actual object
local diceCollection = {
  red    = {state = {}, die = redDie, guid = "3e0276", rotVal = redRotationValues},
  yellow = {state = {}, die = yellowDie, guid = "d1aad4", rotVal = yellowRotationValues},
  green1 = {state = {}, die = greenDie, guid = "3e7c9c", rotVal = greenRotationValues},
  green2 = {state = {}, die = greenDie, guid = "c3ae7e", rotVal = greenRotationValues},
  blue1  = {state = {}, die = blueDie, guid = "6128fe", rotVal = blueRotationValues},
  blue2  = {state = {}, die = blueDie, guid = "bdba03", rotVal = blueRotationValues},
}

-- if roll is ongoing, this variable keep color of player, who initiated it
local rollingPlayerColor = nil
-- will store state and value for all dices of the last roll
local lastRoll = {Red={}, Green={}, Blue={}, White={}}
local lastRollBackup = {Red={}, Green={}, Blue={}, White={}}
local lastRollNeedRestore = {}
local reroll = {}
local lastWeaponType = {Red={}, Green={}, Blue={}, White={}}
local lastWeaponBlast = {Red=0, Green=0, Blue=0, White=0}
local cumulativeStatsMode = {}
local statsUpdateQueued = {}
local syncMode = {}

-- Contols listed below are disabled during dice roll
local freezedSharedUi = {
  "rollDice",
}

local freezedRollerUi = {
  "distance-",
  "distance+",
  "armor-",
  "armor+",
  "accuracy-",
  "accuracy+",
  "deadly-",
  "deadly+",
  "clearPrm",
  "reroll",
  "syncWithActive"
}

local paramRange = {
   -- max hit distance is 15 plus accuracy bonus
  distance = { min = 0, max = 15 },

  -- max pure dmg is 15 plus deadly bonus
  -- max monster armor is 5
  -- I believe, 10 armor should be enough for everyone :)
  armor   = { min = 1, max = 10 },
  accuracy = { min = 0, max = 10 },
  deadly   = { min = 0, max = 10 },
}

-- individual parameters of calculator of each player
local prm = {Red={}, Green={}, Blue={}, White={}}
-- damage prediction for each player
local predictedStats = {Red={}, Green={}, Blue={}, White={}}


-- Local methods declaration
local initParams
local setDefaultParams
local setParam
local displayParam
local setDice
local getParamName
local getParamChange
local calcIteration
local showStats
local setExactStats
local setCumulativeStats
local rollWatch
local addDieValue
local rollEnd
local rotationValueTableToString
local getRotationValueTable
local updateDiceFaces
local bringDiceBack
local updateStats
local isActivePlayer
local toggleSyncMode
local updateSynchronization
local setReroll

function onload()
  initParams()
end

function onFixedUpdate()
  diceUpdateFrame = diceUpdateFrame + 1
  if diceUpdateFrame >= diceUpdateRate then
    diceUpdateFrame = 0
    updateDiceFaces()
  end

  diceReturnFrame = diceReturnFrame + 1
  if diceReturnFrame >= diceReturnRate then
    diceReturnFrame = 0
    bringDiceBack()
  end
end


function initParams()
  for _,color in ipairs(constants.allPlayerColors) do
    setDefaultParams(color)
  end

  -- Save reference to dice into collection
  -- also assign rotation values
  for k,v in pairs(diceCollection) do
    v.dieObj = getObjectFromGUID(v.guid)
    if v.dieObj == nil then
      error("Can't find dice " .. k)
    else
      v.dieObj.setLock(false)
      v.dieObj.highlightOff()
      v.dieObj.setRotationValues(v.rotVal)
    end
  end
end


function setDefaultParams(player_color, section)
  if not section or section == "" then
    section = "dice target bonus"
  end

  if string.find(section, "dice", 1, true) then
    for k in pairs(diceCollection) do
      setDice(player_color, k, false)
    end

    setReroll(player_color, false)
  end

  if string.find(section, "target", 1, true) then
    setParam(player_color, "armor", paramRange.armor.min)
    setParam(player_color, "distance", paramRange.distance.min)
  end
  if string.find(section, "bonus", 1, true) then
    setParam(player_color, "accuracy", paramRange.accuracy.min)
    setParam(player_color, "deadly", paramRange.deadly.min)
  end
end


function clearCalc(player, value, id)
  setDefaultParams(player.color)

  for _,v in pairs(diceCollection) do
    v.dieObj.highlightOff()
  end
end


function setParam(player_color, name, value, fromActivePlayer)
  prm[player_color][name] = value
  displayParam(player_color, name)
  updateStats(player_color)

  if not fromActivePlayer then
    updateSynchronization(player_color, setParam, {name, value, true})
  end
end


function displayParam(player_color, name)
  -- DISTANCE
  if name == "distance" then
    if prm[player_color][name] == 0 then
      Global.UI.setAttribute(name..player_color, "text", "melee")
      Global.UI.setAttribute(name..player_color, "color", "red")
    else
      Global.UI.setAttribute(name..player_color, "text", prm[player_color][name])
      Global.UI.setAttribute(name..player_color, "color", "white")
    end

  elseif name == "accuracy" then
    if prm[player_color][name] == 0 then
      Global.UI.setAttribute(name..player_color, "text", "-")
    elseif prm[player_color][name] <= 4 then  -- can't fit more
      local emojiStr = ""
      for i = 1,prm[player_color][name] do
        emojiStr = emojiStr .. "◎"
      end
      Global.UI.setAttribute(name..player_color, "text", emojiStr)
    else
      Global.UI.setAttribute(name..player_color, "text", prm[player_color][name])
    end

  elseif name == "deadly" then
    if prm[player_color][name] == 0 then
      Global.UI.setAttribute(name..player_color, "text", "-")
    elseif prm[player_color][name] <= 3 then -- can't fit more
      local emojiStr = ""
      for i = 1,prm[player_color][name] do
        emojiStr = emojiStr .. "☠"
      end
      Global.UI.setAttribute(name..player_color, "text", emojiStr)
    else
      Global.UI.setAttribute(name..player_color, "text", prm[player_color][name])
    end


  else
    Global.UI.setAttribute(name..player_color, "text", prm[player_color][name])
  end
end

function setDice(player_color, id, active, fromActivePlayer)
  diceCollection[id].state[player_color] = active

  Global.UI.setAttribute(id.."Shade"..player_color, "active", tostring(not active))
  updateStats(player_color)

  if not fromActivePlayer then
    updateSynchronization(player_color, setDice, {id, active, true})
  end
end


function onDiceToggled(player, value, id)
  if player.color == rollingPlayerColor then
    -- ignore changes during roll
    -- other inputs are blocked on UI level, but this one is shared across players
    return
  end
  --log(id .. player.color .. "=" .. tostring(not diceCollection[id].state[player.color]))
  setDice(player.color, id, not diceCollection[id].state[player.color])
end

function getParamName(id)
  for k in pairs(paramRange) do
    if string.find(id, k, 1, true) then
      return k
    end
  end
end

function getParamChange(id)
  if string.find(id, "+", 1, true) then
    return 1;
  else
    return -1;
  end
end

function adjustParam(player, value, id)
  local name = getParamName(id)
  local delta = getParamChange(id)
  local min = paramRange[name].min
  local max = paramRange[name].max

  if delta < 0  and prm[player.color][name] > min then
    setParam(player.color, name, prm[player.color][name] - 1)
  elseif delta > 0 and prm[player.color][name] < max then
    setParam(player.color, name, prm[player.color][name] + 1)
  end

  --log(name .. player.color .. "=" .. prm[player.color][name])
end



function calculate(player, value, id, silent)
  local dice = {}
  for _,v in pairs(diceCollection) do
    if v.state[player.color] then table.insert(dice, v.die) end
  end

  local keptDiceSum = {}
  if reroll[player.color] then
    for k, v in pairs(diceCollection) do
      if not v.state[player.color] and lastRoll[player.color][k] then
        addDieValue(keptDiceSum, lastRoll[player.color][k])
      end
    end
    log(keptDiceSum, "Kept dice sum")
  end

  -- caclulate number of cases for each outcome
  predictedStats[player.color] = {}
  if not keptDiceSum.miss then
    local state = { range = keptDiceSum.range or 0,
    dmg = keptDiceSum.dmg or 0,
    weight = 1}
    calcIteration(dice, 1, state, prm[player.color], predictedStats[player.color])
  else
    -- otherwise ALL outcomes are misses
    predictedStats[player.color].miss = 6^#dice
  end

  -- convert to percentage
  local totalCases = 6^#dice
  for k,v in pairs(predictedStats[player.color]) do
    predictedStats[player.color][k] = predictedStats[player.color][k] * 100 / totalCases
  end

  -- add ammo consumption statistics
  if keptDiceSum.ammo then
    predictedStats[player.color]["ammo"] = 100
  else
    -- red and yellow dice has chance of 1/3 to spend ammo each
    local ammoDices = 0
    if diceCollection.red.state[player.color] then ammoDices = ammoDices + 1 end
    if diceCollection.yellow.state[player.color] then ammoDices = ammoDices + 1 end
    predictedStats[player.color]["ammo"] = (1 - (2/3)^ammoDices) * 100
  end

  if not silent then
    showStats(player.color)
  end
end

-- caclulate number of cases for each outcome
function calcIteration(dice, depth, state, params, rez)
  -- if reached the bottom, save predictedStatss and exit
  if dice[depth] == nil then
    if params.distance > (state.range + params.accuracy) then
      rez["miss"] = (rez["miss"] or 0) + state.weight
    else
      local hit = math.floor((state.dmg + params.deadly) / params.armor)
      rez[hit] = (rez[hit] or 0) + state.weight
    end
    return
  end

  for i,v in ipairs(dice[depth]) do
    if v == "miss" then
      -- handle miss separately
      local diceLeft = #dice - depth
      local missWeight = state.weight * (6^diceLeft)
      rez["miss"] = (rez["miss"] or 0) + missWeight
    else
      -- go to the next depth
      local newState = {
        range = state.range + v.range,
        dmg = state.dmg + v.dmg,
        weight = state.weight * v.weight,
      }

      calcIteration(dice, depth+1, newState, params, rez)
    end
  end
end

function showStats(player_color)
  --common stats
  Global.UI.setAttribute("pbAmmo" .. player_color, "percentage", predictedStats[player_color]["ammo"] or 0)
  Global.UI.setAttribute("pbMiss" .. player_color, "percentage", predictedStats[player_color]["miss"] or 0)

  --specific stats
  if not cumulativeStatsMode[player_color] then
    setExactStats(player_color)
  else
    setCumulativeStats(player_color)
  end

  instances.vis.call("showInterface", {id="stats", color=player_color})
end


function setExactStats(player_color)
  for i = 0,15 do
    Global.UI.setAttribute(
      "t" .. tostring(i) .. player_color,
      "text",
      tostring(i) .. "dmg")
    Global.UI.setAttribute(
      "pb" .. tostring(i) .. player_color,
      "percentage",
      predictedStats[player_color][i] or 0)
  end
end

function setCumulativeStats(player_color)
  local sum = 0
  -- even though there are only 15 bars to display, to get proper sum of chances we should
  -- iterate predictedStats[player.color] from maxdmg+maxdeadly or more
  -- TODO: redefine all magic numbers through named variables
  for i=25,0,-1 do
    sum = sum + (predictedStats[player_color][i] or 0)
    Global.UI.setAttribute("pb" .. tostring(i) .. player_color, "percentage", sum)
    Global.UI.setAttribute("t" .. tostring(i) .. player_color, "text", "≥" .. tostring(i) .. "dmg")
  end
end

function toggleStatsMode(player, value, id)
  cumulativeStatsMode[player.color] = not cumulativeStatsMode[player.color]
  showStats(player.color)
end

function updateStats(player_color)
  if instances.vis.call("isVisible", {id="stats", color=player_color})
    and not statsUpdateQueued[player_color]
  then
    statsUpdateQueued[player_color] = true
    Wait.frames(
      function()
        calculate(Player[player_color])
        statsUpdateQueued[player_color] = false
      end,
      1)
  end
end

function rollWatch(player_color)
  for k,v in pairs(diceCollection) do
    if v.state[player_color] and not v.dieObj.resting then
      return false
    end
  end
  return true
end

function addDieValue(sum, value)
  sum.range = (sum.range or 0) + (value.range or 0)
  sum.dmg = (sum.dmg or 0) + (value.dmg or 0)
  sum.ammo = sum.ammo or value.ammo
  sum.miss = sum.miss or value.miss
end

function rollEnd(player_color)
  -- print each dice individually and count sum
  log(" --- Roll end --- ")

  local currentRoll = {}
  local sum = {range=0, dmg=0, ammo=false, miss=false}
  for k,v in pairs(diceCollection) do
    if v.state[player_color] then
      local value = getRotationValueTable(v.dieObj)
      log(value, k .." rolled by " .. player_color .. ": ")
      addDieValue(sum, value)
      currentRoll[k] = value
    else
      currentRoll[k] = nil
      if reroll[player_color] and lastRoll[player_color][k] then
        -- die wasn't rolled now, but it's part of previous roll, which is rerolled
        addDieValue(sum, lastRoll[player_color][k])
        log(lastRoll[player_color][k], k .. " used from previous roll: " )

        -- notify if displayed value and stored one are different
        local oldValueString = rotationValueTableToString(lastRoll[player_color][k])
        if v.dieObj.getRotationValue() ~= oldValueString then
          broadcastToAll("Note: " .. k .. " isn't rerolled, but it has been moved since last roll. " ..
          "Using " .. oldValueString .. " from last roll.",
          Color.Orange)
        end
      end
    end
  end

  if not reroll[player_color] then
    lastRoll[player_color] = currentRoll
    if isActivePlayer(player_color) then
      for _,clr in ipairs(constants.allPlayerColors) do
        if syncMode[clr] then
          lastRoll[clr] = lastRoll[player_color]
        end
      end
    end
  end

  -- raw sum report
  local total = ""
  if sum.miss then
    total = total .. "MISS "
  end
  total = total .. tostring(sum.range) .. "range"
  if prm[player_color].accuracy ~= 0 then
    total = total .. "+" .. tostring(prm[player_color].accuracy)
  end

  total = total .. " " .. tostring(sum.dmg) .. "dmg"
  if prm[player_color].deadly ~= 0 then
    total = total .. "+" .. tostring(prm[player_color].deadly)
  end

  if sum.ammo then total = total .. " ammo" end
  broadcastToAll(total, stringColorToRGB(player_color))

  -- bonus/armor/distance accounted
  local hit = 0
  if sum.miss then
    broadcastToAll("MISS on dice", Color.Pink)
  else
    if sum.range + prm[player_color].accuracy < prm[player_color].distance then
      broadcastToAll("MISS: Range + accuracy is too low", Color.Pink)
    else
      hit = math.floor((sum.dmg + prm[player_color].deadly) / prm[player_color].armor)
      if hit == 0 then
        broadcastToAll("HIT: no penetration", Color.Pink)
      else
        broadcastToAll("HIT: " .. hit .. " wounds", Color.Pink)
      end
    end
  end

  -- highlight ammo consumption in CAPS if not melee and not invader player
  if sum.ammo and player_color ~= "White" and prm[player_color].distance ~= 0 then
    broadcastToAll("AMMO LOST", Color.Pink)
  end

  updateDiceFaces()

  instances.luck.call("addRoll",
    {color = player_color, hit = hit, ammo = sum.ammo, stats = predictedStats[player_color]})

  -- This MUST be called, and also this should be the last thing to execute
  toggleInteraction(player_color, true)
end

function rollDice(player, value, id)
  -- can't keep syncing during roll, otherwise params might be changed by active player midroll
  if syncMode[player.color] then
    toggleSyncMode(player.color)
  end

  local rollHappened = false
  for _,v in pairs(diceCollection) do
    if v.state[player.color] then
      v.dieObj.roll()
      v.dieObj.highlightOn(Color.pink, 45)
      rollHappened = true
    else
      v.dieObj.highlightOff()
    end
  end

  if not rollHappened then return end
  -- shut down controls, so nobody messes with parameters
  toggleInteraction(player.color, false)

  -- roll announcement and details printing
  local actionStr = " rolls..."
  if reroll[player.color] then
    actionStr = " RErolls..."
  end
  broadcastToAll(player.steam_name .. actionStr, stringColorToRGB(player.color))

  local diceString = "  "
  for k, v in pairs(diceCollection) do
    if v.state[player.color] then
      diceString = diceString .. k .. ", "
    end
  end
  diceString = string.gsub(diceString, ", $", "")
  printToAll(diceString, stringColorToRGB(player.color))
  printToAll(
    "  dst=" .. prm[player.color].distance .. ", arm=" .. prm[player.color].armor
      .. ", acc=" .. prm[player.color].accuracy .. ", deadly=" .. prm[player.color].deadly,
    stringColorToRGB(player.color))

  Wait.condition(
    function() return rollEnd(player.color) end,
    function() return rollWatch(player.color) end
  )

  if not instances.vis.call("isVisible", {id="stats", color=player.color}) then
    -- stats are hidden, so they are likely out of date
    -- we need accurate prediction to store expected dmg and its variability
    -- roll start is the best time since calculation lag won't be noticeable
    calculate(player, nil, nil, true)
  end

  -- notify all interested in event
  instances.creator.call("onRollStart", player.color)
end

function rotationValueTableToString(value)
  if value.miss then
    return "miss"
  end

  local str = "range=" .. value.range .. " dmg=" .. value.dmg
  if value.ammo then
    return str .. " ammo"
  else
    return str
  end
end

function getRotationValueTable(obj)
  local str = obj.getRotationValue()
  local rez = {}
  for k, v in string.gmatch(str, "(%w+)=?(%w*)") do
    if v == nil or v == "" then
      rez[k] = true
    else
      rez[k] = v
    end
  end
  return rez
end

function toggleInteraction(player_color, active)
  for _, iface in ipairs(freezedRollerUi) do
    Global.UI.setAttribute(iface..player_color, "interactable", active)
  end
  Global.UI.setAttribute("clearPrm"..player_color, "textColor", "white")
  Global.UI.setAttribute("syncWithActive"..player_color, "textColor", "white")

  for _, iface in ipairs(freezedSharedUi) do
    Global.UI.setAttribute(iface, "interactable", active)
  end
  Global.UI.setAttribute("rollDice", "textColor", "white")

  if active then
    rollingPlayerColor = false
  else
    rollingPlayerColor = player_color
  end
end


function updateDiceFaces()
  previousDiceValues = {}
  for k,v in pairs(diceCollection) do
    local newValue = v.dieObj.getRotationValue()
    if newValue != previousDiceValues[k] then
      previousDiceValues[k] = newValue
      local dieClr = string.match(k, "%a+") -- get color without digit
      Global.UI.setAttribute(
        k.."Image",
        "image",
        dieClr .. " " .. v.dieObj.getRotationValue())
    end
  end
end

function bringDiceBack()
  for k,v in pairs(diceCollection) do
    if v.dieObj.getPosition().y < -5 then
      broadcastToAll(k .. " die dropped off the table, returning...", Color.Pink)
      v.dieObj.setPosition({-8.50, 13.00, 34.00})
      v.dieObj.setVelocity({0, 0, 0})
    end
  end
end


function onRerollClick(player, value, id)
  setReroll(player.color, (string.lower(value) == "true"))
end

function setReroll(player_color, value, fromActivePlayer)
  reroll[player_color] = value
  --log(id .. player_color .. "=" .. tostring(reroll[player_color]))

  if reroll[player_color] then
    for k in pairs(diceCollection) do
      if not lastRoll[player_color][k] then
        instances.vis.call("hideInterface", {id=k, color=player_color})
        setDice(player_color, k, false, fromActivePlayer)
      else
        instances.vis.call("showInterface", {id=k, color=player_color})
      end
    end
  else
    for k in pairs(diceCollection) do
      instances.vis.call("showInterface", {id=k, color=player_color})
    end
    if lastRollNeedRestore[player_color] then
      lastRollNeedRestore[player_color] = false
      lastRoll[player_color] = lastRollBackup[player_color]
    end
  end

  if not fromActivePlayer then
    updateSynchronization(player_color, setReroll, {value, true})
  end

  Global.UI.setAttribute("reroll"..player_color, "isOn", value and "True" or "False")
end

function configure(params)
  log(params, "Params: ")
  if not params or not params.color then
    log(params, "ERROR configure param missing color: ")
    return
  end

  if params.color == rollingPlayerColor then
    broadcastToColor(
      "Hey, roll is already going, attack parameters can't be changed now",
      params.color,
      stringColorToRGB(params.color)
      )
    return
  end

  if params.dice then
    setDefaultParams(params.color, "dice")
    for i,v in ipairs(params.dice) do
      setDice(params.color, v, true)
    end
  end

  if params.target then
    setDefaultParams(params.color, "target")
    for k,v in pairs(params.target) do
      setParam(params.color, k, v)
    end

    -- euristics to guess whether we are setting parameters for marine with melee weapon
    -- in such case, forcer distance to 0 instead
    -- if only target is present, previously melee weapon used, only red dice present, distance is one
    if not params.dice and not params.bonus
      and lastWeaponType[params.color] == "melee"
      and params.target.distance == 1
      and diceCollection.red.state[params.color]
      and not diceCollection.yellow.state[params.color]
      and not diceCollection.blue1.state[params.color]
      and not diceCollection.blue2.state[params.color]
      and not diceCollection.green1.state[params.color]
      and not diceCollection.green2.state[params.color]
    then
      setParam(params.color, "distance", 0)
    end

    -- if explosive, then adjust armor for the strongest creature in radius
    -- It would be nice to have euristics here as well to prevent treating manual input
    -- after previous shot with explosives as explosive. But it will do for now.
    if not params.dice and not params.bonus
      and params.meta.neighboursArmor
      and lastWeaponBlast[params.color] > 0
      and params.meta.neighboursArmor[lastWeaponBlast[params.color]]
    then
      setParam(params.color, "armor", params.meta.neighboursArmor[lastWeaponBlast[params.color]])
    end
  end


  if params.bonus then
    setDefaultParams(params.color, "bonus")
    if params.bonus ~= "none" then
      for k,v in pairs(params.bonus) do
        setParam(params.color, k, v)
      end
    end
  end

  if params.meta then
    if params.meta.weaponType then
      lastWeaponType[params.color] = params.meta.weaponType
      if not params.target then
        -- no distance is provided (yet), but for now update it to represent weapon type
        if params.meta.weaponType == "melee" and prm[params.color].distance ~= 0 then
          setParam(params.color, "distance", 0)
        elseif params.meta.weaponType == "range" and prm[params.color].distance == 0 then
          setParam(params.color, "distance", 1)
        end
      end
    end

    if params.meta.blast then
      lastWeaponBlast[params.color] = params.meta.blast
    end
  end

  instances.vis.call("showInterface", {id="calculator", color=params.color})
end

function toggleCalc(player, value, id)
  instances.vis.call("toggleInterface", {id="calculator", color=player.color})
end

function closeStats(player, value, id)
  instances.vis.call("hideInterface", {id="stats", color=player.color})
end

function onSyncClick(player, value, id)
  local turnColor = Turns.turn_color
  if isActivePlayer(player.color) then
    broadcastToColor("You are the active player", player.color, player.color)
    return
  elseif not Turns.enable then
    broadcastToColor("No active player since turns are disabled", player.color, player.color)
    return
  end

  toggleSyncMode(player.color)
  if not syncMode[player.color] then
    return
  end

  for k,v in pairs(prm[turnColor]) do
    setParam(player.color, k, v, true)
  end

  for k,v in pairs(diceCollection) do
    setDice(player.color, k, v.state[turnColor], true)
  end

  lastRollBackup[player.color] = lastRoll[player.color]
  lastRoll[player.color] = lastRoll[turnColor]
  setReroll(player.color, reroll[turnColor], true)
end

function toggleSyncMode(color)
  syncMode[color] = not syncMode[color]
  if syncMode[color] then
    Global.UI.setAttribute("syncWithActive"..color, "color", "Orange")
  else
    Global.UI.setAttribute("syncWithActive"..color, "color", "rgba(0, 0, 0, 0.95)")
    Global.UI.setAttribute("syncWithActive"..color, "textColor", "White")

    -- if sync is disabled and we aren't in reroll mode, restore last roll
    -- otherwise restoration will be done when exiting reroll mode
    if not reroll[color] then
      lastRoll[color] = lastRollBackup[color]
    else
      lastRollNeedRestore[color] = true
    end
  end
end

function isActivePlayer(color)
  return color == Turns.turn_color
end

function updateSynchronization(player_color, modifyFunc, params)
  if isActivePlayer(player_color) then
    for _, clr in ipairs(constants.allPlayerColors) do
      if syncMode[clr] then
        modifyFunc(clr, unpack(params))
      end
    end
  elseif syncMode[player_color] then
    toggleSyncMode(player_color)
  end
end

function onPlayerTurnEnd(player_color_end, player_color_next)
  -- disable all syncing
  for _,clr in ipairs(constants.allPlayerColors) do
    if syncMode[clr] then
      toggleSyncMode(clr)
    end
  end
end

