require("instances")
require("utils")
require("constants")

local attackingCandidate = nil
local activeMonster = nil
local monsterPickPosition = nil

local allBags = {}

local mnstCount = {
  Zombie     = 4,
  Trite      = 4,
  Imp        = 4,
  Demon      = 2,
  Mancubus   = 2,
  Archvile   = 2,
  Hellknight = 2,
  Cyberdemon = 1,
}

-- Local methods declaration
local isMonsterBag
local getBagContentName
local getBagContentCount

function isMonsterBag(obj)
  if obj.getQuantity() == -1 or obj.tag ~= "Infinite" then
    return false
  end

  for _,monster in ipairs(constants.mnstList) do
    if string.find(obj.getName(), monster) then
      return true, monster
    end
  end

  return false
end

function getBagContentName(obj)
  if not isMonsterBag(obj) then
    return obj.getName()
  end

  return (string.gsub(obj.getName(), " x%d+", ""))
end

function getBagContentCount(obj)
  if not isMonsterBag(obj) then
    return obj.getQuantity()
  end

  return tonumber(string.match(obj.getName(), "x(%d+)"), 10)
end

function onLoad()
  for _, obj in ipairs(getAllObjects()) do
    if obj.getQuantity() ~= -1 and obj.tag ~= "Deck" then
      allBags[getBagContentName(obj)] = obj
    end
  end
end


function onObjectLeaveContainer(container, object)
  -- only renaming is done here. Script/xml assignment and bag counter update is done in onObjectSpawn
  if isMonsterBag(container) and object.getName() == "" then
    object.setName(getBagContentName(container))
  end
end

function onObjectSpawn(object)
  if utils.isDoor(object) then
    object.setLuaScript(instances.door.getLuaScript())

  elseif utils.isTeleporter(object) then
    object.setLuaScript(instances.teleport.getLuaScript())

  elseif utils.isMonster(object) then
    local count = getBagContentCount(allBags[object.getName()])

    if count == 0 then
      broadcastToAll("No figures left of ".. object.getName(), Color.Oragne)
      -- make sure name is cleared before destruct, so onObjectDestroy doesn't change counter
      object.setName("")
      object.destruct()
      return
    end

    count = count - 1
    allBags[object.getName()].setName(object.getName() .. " x" .. count)

    object.setLuaScript(instances.monster.getLuaScript())
  end
end

function onObjectDestroy(obj)
  if not utils.isMonster(obj) or string.find(obj.getName(), "Grey") then
    return
  end

  local count = getBagContentCount(allBags[obj.getName()])
  count = count + 1

  for mnst, max in pairs(mnstCount) do
    if string.find(obj.getName(), mnst) then
      count = math.min(count, max)
      break
    end
  end

  allBags[obj.getName()].setName(obj.getName() .. " x" .. count)
end

function onAttackerSet(req)
  if Turns.enable
    and Turns.turn_color == "White"
    and req.color == "White"
    and req.attacker
    and utils.isMonster(req.attacker)
  then
    attackingCandidate = req.attacker
  end
end

function onRollStart(color)
  if Turns.enable
    and Turns.turn_color == "White"
    and color == "White"
    and attackingCandidate
  then
    setActiveMonster(attackingCandidate)
    attackingCandidate = nil
  end
end

function onPlayerTurnEnd(turnColor, nextTurnColor)
  if turnColor == "White" then
    activeMonster = nil
    attackingCandidate = nil
    monsterPickPosition = nil
  end
end

function setActiveMonster(monster)
  if monster ~= activeMonster then
    if activeMonster then
      activeMonster.call("onActivationChange", false)
    end
    activeMonster = monster
    if not activeMonster.call("onActivationChange", true) then
      activeMonster = nil
    end
  end
end

function onObjectPickUp(player_color, obj)
  if player_color == "White"
  then
    if Turns.enable
      and Turns.turn_color == "White"
      and utils.isMonster(obj)
      and utils.isAboveMap(obj)
    then
      monsterPickPosition = obj.getPosition()
    else
      monsterPickPosition = nil
    end
  end
end

function onObjectDrop(player_color, obj)
  if Turns.enable
    and Turns.turn_color == "White"
    and player_color == "White"
    and utils.isMonster(obj)
    and utils.isAboveMap(obj)
    and monsterPickPosition
  then
    local pos = obj.getPosition()
    if math.abs(monsterPickPosition.x - pos.x) > 0.5
      or math.abs(monsterPickPosition.z - pos.z) > 0.5
    then
      setActiveMonster(obj)
    end
    monsterPickPosition = nil
  end
end

function onManualClearActive(monster)
  if monster == activeMonster then
    activeMonster = nil
  end
end

function spawnElement(req)
  local bagName = req.elem.name
  local monsterType = utils.getMonsterType(req.elem.name)

  if string.find(req.elem.name, "Grey") and monsterType then
    local maxCount = 0
    for _, color in ipairs(constants.allMarineColors) do
      if Player[color].seated then
        local currentCount = getBagContentCount(allBags[color.." "..monsterType])
        if maxCount < currentCount then
          maxCount = currentCount
          bagName = color.." "..monsterType
        end
      end
    end

    if maxCount == 0 then
      broadcastToAll("No figures left for ".. req.elem.name, Color.Oragne)
      return
    end
  end

  allBags[bagName].takeObject({
    position=req.elem.position,
    rotation=req.elem.rotation,
    smooth=false,
    callback_function=function(obj)
      if req.lock then
        obj.setLock(true)
      end
      if req.elem.reveal then
        obj.setGMNotes("Reveal:"..req.elem.reveal)
      elseif req.bonus then
        obj.setGMNotes("Bonus:"..req.bonus)
      end
    end,
  })
end
