require("instances")
require("utils")
require("constants")
require("dbg")

local attackingCandidate = nil
local activeMonster = nil
local monsterPickPosition = nil

local allBags = {}

local mnstCount = {
  Zombie     = 4,
  Trite      = 4,
  Imp        = 4,
  Demon      = 2,
  Mancubus   = 2,
  Archvile   = 2,
  Hellknight = 2,
  Cyberdemon = 1,
}

-- Local methods declaration
local isMonsterBag
local getBagContentName
local getBagContentCount
local increaseMonsterCount
local decreaseMonsterCount

function isMonsterBag(obj)
  if obj.getQuantity() == -1 or obj.tag ~= "Infinite" then
    return false
  end

  for _,monster in ipairs(constants.mnstList) do
    if string.find(obj.getName(), monster) then
      return true, monster
    end
  end

  return false
end

function getBagContentName(obj)
  if not isMonsterBag(obj) then
    return obj.getName()
  end

  return (string.gsub(obj.getName(), " x%d+", ""))
end

function getBagContentCount(obj)
  if not isMonsterBag(obj) then
    return obj.getQuantity()
  end

  return tonumber(string.match(obj.getName(), "x(%d+)"), 10)
end

function onLoad()
  for _, obj in ipairs(getAllObjects()) do
    if obj.getQuantity() ~= -1 and obj.tag ~= "Deck" then
      allBags[getBagContentName(obj)] = obj
    end
  end
end


function onObjectLeaveContainer(container, object)
  -- only renaming is done here. Script/xml assignment and bag counter update is done in onObjectSpawn
  if isMonsterBag(container) and object.getName() == "" then
    object.setName(getBagContentName(container))
  end
end

function onObjectSpawn(object)
  if utils.isDoor(object) then
    object.setLuaScript(instances.door.getLuaScript())

  elseif utils.isInvisibleToken(object) then
    object.setInvisibleTo({"Blue", "Green", "Red", "Grey"})

  elseif utils.isTeleporter(object) then
    object.setLuaScript(instances.teleport.getLuaScript())

  elseif utils.isMonster(object) and not string.find(object.getName(), "Grey") then
    if decreaseMonsterCount(object.getName()) then
      object.setLuaScript(instances.monster.getLuaScript())
    else
      broadcastToAll("No figures left of ".. object.getName(), Color.Oragne)
      -- make sure name is cleared before destruct, so onObjectDestroy doesn't change counter
      object.setName("")
      object.destruct()
      return
    end

  end
end

function onObjectDestroy(obj)
  if not utils.isMonster(obj) or string.find(obj.getName(), "Grey") then
    return
  end

  increaseMonsterCount(obj.getName())
end

function onAttackerSet(req)
  if Turns.enable
    and Turns.turn_color == "White"
    and req.color == "White"
    and req.attacker
    and utils.isMonster(req.attacker)
  then
    attackingCandidate = req.attacker
  end
end

function onRollStart(color)
  if Turns.enable
    and Turns.turn_color == "White"
    and color == "White"
    and attackingCandidate
  then
    setActiveMonster(attackingCandidate)
    attackingCandidate = nil
  end
end

function onPlayerTurnEnd(turnColor, nextTurnColor)
  if turnColor == "White" then
    activeMonster = nil
    attackingCandidate = nil
    monsterPickPosition = nil
  end
end

function setActiveMonster(monster)
  if monster ~= activeMonster then
    if activeMonster then
      activeMonster.call("onActivationChange", false)
    end
    activeMonster = monster
    if not activeMonster.call("onActivationChange", true) then
      activeMonster = nil
    end
  end
end

function onObjectPickUp(player_color, obj)
  if player_color == "White"
  then
    if Turns.enable
      and Turns.turn_color == "White"
      and utils.isMonster(obj)
      and utils.isAboveMap(obj)
    then
      monsterPickPosition = obj.getPosition()
    else
      monsterPickPosition = nil
    end
  end
end

function onObjectDrop(player_color, obj)
  -- mark dropped monster as active if position has changed and new one is above map
  if Turns.enable
    and Turns.turn_color == "White"
    and player_color == "White"
    and utils.isMonster(obj)
    and utils.isAboveMap(obj)
    and monsterPickPosition
  then
    local pos = obj.getPosition()
    if math.abs(monsterPickPosition.x - pos.x) > 0.5
      or math.abs(monsterPickPosition.z - pos.z) > 0.5
    then
      setActiveMonster(obj)
    end
    monsterPickPosition = nil
  end

  -- also help position 2x2 monsters and doors on the grid
  local alignWithGrid = false
  if utils.isMonster(obj) then
    local isLarge = utils.isLarge(obj)
    alignWithGrid = isLarge.x and isLarge.z
  elseif utils.isDoor(obj) then
    alignWithGrid = true
  end

  if alignWithGrid then
    local pos = obj.getPosition()
    pos.x = math.floor(pos.x + 0.5)
    pos.z = math.floor(pos.z + 0.5)
    obj.setPositionSmooth(pos, false, false)
  end
end

function onManualClearActive(monster)
  if monster == activeMonster then
    activeMonster = nil
  end
end

function spawnElement(req)
  local bagName = req.elem.name
  local monsterType = utils.getMonsterType(req.elem.name)

  if string.find(req.elem.name, "Grey") and monsterType then
    local maxCount = 0
    for _, color in ipairs(constants.allMarineColors) do
      if Player[color].seated or dbg.cfg.unconditionalGreySpawn then
        local currentCount = getBagContentCount(allBags[color.." "..monsterType])
        if maxCount < currentCount then
          maxCount = currentCount
          bagName = color.." "..monsterType
        end
      end
    end

    if maxCount == 0 then
      broadcastToAll("No figures left for ".. req.elem.name, Color.Oragne)
      return
    end
  end

  -- when spawning slightly change position and rotation, then change back after random delay
  -- this is a work around TTS bug, that spawned objects might appear
  -- at different positions/rotations for different players
  -- all clients are forced to sync position/rotation on shift back, so spawned object
  -- looks the same for all involved players
  local spawnedObject = allBags[bagName].takeObject({
    position=utils.shiftY(req.elem.position, -0.001),
    rotation=utils.shiftY(req.elem.rotation, -0.1),
    smooth=false,
    callback_function=function(obj)
      if req.lock then
        obj.setLock(true)
      end

      if req.elem.reveal then
        obj.setGMNotes("Reveal:"..req.elem.reveal)
      elseif req.bonus then
        obj.setGMNotes("Bonus:"..req.bonus)
      end

      if req.script then
        obj.setLuaScript(req.script)
      end
    end,
  })

  Wait.time(function()
    if spawnedObject then
      spawnedObject.setPosition(utils.shiftY(spawnedObject.getPosition(), 0.001))
      spawnedObject.setRotation(utils.shiftY(spawnedObject.getRotation(), 0.1))
    else
      -- this happens if spawned tokens formed a deck
      -- it might be reasonable to find all new decks and shift them
      -- but this means a lot of effort with little to no benefits:
      -- shift itself isn't noticeable, bug with position/rotation isn't visible on decks

      -- Alternative hacky solution is to set different height for each token from stack during scan
      -- This way they will spawn individually and will have enough airborne time to be treated
      -- before stacking into deck. Currently neither solution is applied.
    end
  end,
  0.2 + math.random()*0.3)
end

function onRenamedToGrey(monsterName)
  increaseMonsterCount(monsterName)
end

function increaseMonsterCount(monsterName)
  local count = getBagContentCount(allBags[monsterName])
  count = count + 1

  for mnst, max in pairs(mnstCount) do
    if string.find(monsterName, mnst) then
      if count > max then
        return false
      end
      break
    end
  end

  allBags[monsterName].setName(monsterName .. " x" .. count)
  return true
end

function decreaseMonsterCount(monsterName)
  local count = getBagContentCount(allBags[monsterName])

  if count > 0 then
    count = count - 1
    allBags[monsterName].setName(monsterName .. " x" .. count)
    return true
  else
    return false or dbg.cfg.unlimitedMonsters
  end
end
