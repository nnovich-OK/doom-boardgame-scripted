require("instances")
require("utils")

if string.find(self.getName(), "Template") then
  return
end

-- Local methods declaration
local getSquashedMonsters
local checkAccess

function onLoad(save_state)
  saved_data = JSON.decode(save_state)

  -- XML
  if saved_data and saved_data.xml then
    self.UI.setXml(saved_data.xml)
  else
    self.UI.setXml(instances.door.UI.getXml())
  end

  Wait.frames(
    function()
      self.UI.setAttribute("open1", "active", "true")
      self.UI.setAttribute("open2", "active", "true")
    end,
    1)
end

function onSave()
   local save_state = JSON.encode({xml = self.UI.getXml()})
   self.script_state = save_state
end


function onOpenClick(player, value, id)
  instances.click.call("handleClickByType",
    {color = player.color,
    id = id..self.getGUID(),
    owner = self,
    single = "askForDoubleClick",
    parametersSingle = {color=player.color},
    double = "toggleOpen",
    parametersDouble = {color=player.color},
  })
end

function askForDoubleClick(params)
  broadcastToColor("Doubleclick on door to open/close",
    params.color, params.color)
end

function toggleOpen(params)
  local state = self.getStateId()
  if state == 1 then
    openDoor(params.color)
  elseif state == 2 then
    closeDoor({textColor=params.color, force=false})
  end
end

function openDoor(color)
  if not checkAccess(color) then
    broadcastToColor("You don't have a key", color, color)
    return self
  end

  local gmNotes = self.getGMNotes()
  if gmNotes and string.find(gmNotes, "Reveal:") then
    instances.map.call("revealArea", {
      area=string.gsub(gmNotes, "Reveal:", ""),
      color=color
    })
    self.setGMNotes("")
  end
  return self.setState(2)
end

-- When force is set, door squashes any unlucky monsters.
-- Otherwise it can't be closed if blocked.
function closeDoor(req)
  assert(req and req.textColor, "closeDoor incorrect request")
  req.scoreColor = req.scoreColor or req.textColor
  local monsters, score = getSquashedMonsters()

  if #monsters == 0 then
    return self.setState(1)

  elseif not req.force then
    local msg = "Door closing is blocked by monsters"
    if Player[req.textColor] and Player[req.textColor].seated then
      broadcastToColor(msg, req.textColor, req.textColor)
    else
      broadcastToAll(msg, req.textColor)
    end
    return nil

  else
    for _, mnst in ipairs(monsters) do
      mnst.destruct()
    end
    if utils.isMarineColor(req.scoreColor) then
      broadcastToAll("Door squashed monsters for " .. score .. " scores", req.textColor)
      instances.score.call("changeScore", {color=req.scoreColor, delta=score})
    end
    return self.setState(1)

  end
end

function getSquashedMonsters()
  local squashed = {}
  local killScore = 0
  local pos = self.getPosition()
  local rot = self.getRotation()
  local n = Vector(0.5, 0, 0):rotateOver("y", rot.y) -- normal to door plane
  local t = Vector(0, 0, 0.5):rotateOver("y", rot.y) -- tangential

  -- Monsters are named according to quadrants if door plane is along z axis:
  --  ^  z
  -- 2|1
  -- -+---> x
  -- 3|4

  local m1 = utils.getObjectAt(pos+n+t, utils.isMonster)
  local m2 = utils.getObjectAt(pos-n+t, utils.isMonster)
  if m1 and m2 and m1.getGUID() == m2.getGUID() then
    table.insert(squashed, m1)
    killScore = killScore + utils.getMonsterStats(m1.getName()).score
  end

  local m3 = utils.getObjectAt(pos-n-t, utils.isMonster)
  local m4 = utils.getObjectAt(pos+n-t, utils.isMonster)
  if m3 and m4 and m3.getGUID() == m4.getGUID()
    and (not squashed[1] or squashed[1].getGUID() ~= m3.getGUID())
  then
    table.insert(squashed, m3)
    killScore = killScore + utils.getMonsterStats(m3.getName()).score
  end

  return squashed, killScore
end

function checkAccess(color)
  -- full access to invader player as GM
  if not utils.isMarineColor(color) then
    return true
  end

  local name = self.getName()
  local key = nil

  if string.find(name, "Blue") != nil then
    key = "bluekey"
  elseif string.find(name, "Yellow") != nil then
    key = "yellowkey"
  elseif string.find(name, "Red") != nil then
    key = "redkey"
  end

  -- not a security door
  if not key then
    return true
  end

  return instances.inv.call("haveItem", {color=color, item=key})
end
