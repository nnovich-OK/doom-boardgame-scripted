require("constants")
require("instances")
require("utils")

local saveState = {}
local fragsScored = 0
local fragLimit = 6
local marineOrder = {}

local fragTintColors = {
  ["Red died"]="rgba(1, 0.6, 0.6, 1)",
  ["Green died"]="rgba(0.6, 1, 0.6, 1)",
  ["Blue died"]="rgba(0.6 0.6, 1, 1)",
}

local invMode = {Red={}, Green={}, Blue={}, White={}}
local lastInvMode = {Red={}, Green={}, Blue={}, White={}}

local startingAmmoModifier = {2, 2, 0, -1, -1}

local pickableTokens = {
  ['Armor']='armor',

  ['Shells/Bullets']='shell',
  ['Rockets/Grenades']='rocket',
  ['Energy Cell']='cell',

  ['Chainsaw']='chainsaw',
  ['Shotgun']='shotgun',
  ['Machine Gun']='machinegun',
  ['Chain Gun']='chaingun',
  ['Rocket Launcher']='launcher',
  ['Plasma Gun']='plasma',
  ['BFG']='bfg',

  ['Berserk']='berserk',
  ['Adrenaline']='adrenalin',

  ['Blue Key']='bluekey',
  ['Yellow Key']='yellowkey',
  ['Red Key']='redkey',

  ['Health']='health',
}

local saveStateItems = {
  armor=true,
  shell=true,
  rocket=true,
  cell=true,
  chainsaw=true,
  machinegun=true,
  shotgun=true,
  chaingun=true,
  launcher=true,
  plasma=true,
  bfg=true,
  berserk=true,
  adrenalin=true,
  cancel=true,
  bluekey=true,
  yellowkey=true,
  redkey=true,
}

local obtainableItems = {
  armor=true,
  shell=true,
  rocket=true,
  cell=true,
  chainsaw=true,
  machinegun=true,
  shotgun=true,
  chaingun=true,
  launcher=true,
  plasma=true,
  bfg=true,
  berserk=true,
  adrenalin=true,
  cancel=true,
  bluekey=true,
  yellowkey=true,
  redkey=true,
}

local transferableItems = {
  shell = true,
  rocket = true,
  cell = true,
  chainsaw = true,
  machinegun = true,
  shotgun = true,
  chaingun = true,
  launcher = true,
  plasma = true,
  bfg = true,
}

local sharedItems = {
  bluekey = true,
  yellowkey = true,
  redkey = true,
}

local orderItems = {
  aim = true,
  dodge = true,
  guard = true,
  heal = true,
}

local itemLimit = {
  bluekey = 1,
  yellowkey = 1,
  redkey = 1,

  berserk = 3, -- number of tokens might be larger (6?), but this digit is about duration
               -- picking the new berserk should refresh the duration, so 3 is max
  cancel = 3,
  adrenalin = 3,

  armor = 10,
  shell = 21,
  rocket = 15,
  cell = 9,
}
utils.setTableDefaultValue(itemLimit, 3) -- all weaopons have 3 copies total

local countActivationThreshold = {
  fist = 2,
  chainsaw = 2,
  pistol = 2,
  machinegun = 2,
  shotgun = 2,
  chaingun = 2,
  grenade = 2,
  launcher = 2,
  plasma = 2,
  bfg = 2,

  bluekey = 2,
  yellowkey = 2,
  redkey = 2,

  aim = 2,
  dodge = 2,
  guard = 2,
  heal = 2,
}

gunStats = {
  fist = {
    ammo = "",
    attack = {"red"},
    melee = true,
    attackMod = {},
    reminder = "",
  },

  chainsaw = {
    ammo = "",
    attack = {"red"},
    melee = true,
    attackMod = {deadly=1},
    reminder = "sweep",
  },

  pistol = {
    ammo = "shell",
    attack = {"yellow", "green2"},
    melee = false,
    attackMod = {},
    reminder = "",
  },

  machinegun = {
    ammo = "shell",
    attack = {"yellow", "blue2", "green2"},
    melee = false,
    attackMod = {accuracy=2},
    reminder = "",
  },

  shotgun = {
    ammo = "shell",
    attack = {"red", "blue1"},
    melee = false,
    attackMod = {deadly=1},
    reminder = "blow-through",
  },

  chaingun = {
    ammo = "shell",
    attack = {"red", "green1", "green2"},
    melee = false,
    attackMod = {accuracy=1},
    reminder = "blow-through",
  },

  grenade = {
    ammo = "rocket",
    attack = {"yellow", "blue1", "blue2"},
    melee = false,
    attackMod = {},
    reminder = "seeking, blast 1",
  },

  launcher = {
    ammo = "rocket",
    attack = {"yellow", "blue2", "green1", "green2"},
    melee = false,
    attackMod = {},
    reminder = "blast 1, knockback",
  },

  plasma = {
    ammo = "cell",
    attack = {"red", "yellow", "blue1", "green1"},
    melee = false,
    attackMod = {accuracy=1},
    reminder = "",
  },

  bfg = {
    ammo = "cell",
    attack = {"red", "yellow", "blue1", "green1", "blue2", "green2"},
    melee = false,
    attackMod = {deadly=1},
    reminder = "blast 2",
  },

}

-- Local methods declaration
local prepareGunAttack
local clearInvMode
local setInvMode
local getItemCount
local setItemCount
local adjustItemCount
local haveItem
local fullWithItem
local activateMarineOrder

function onPreprocFinished()
  Global.UI.setAttribute("inventoryPanel" .. "Red", "color", "rgba(0.14, 0, 0, 0.95)")
  Global.UI.setAttribute("inventoryPanel" .. "Green", "color", "rgba(0, 0.1, 0, 0.95)")
  Global.UI.setAttribute("inventoryPanel" .. "Blue", "color", "rgba(0, 0, 0.1, 0.95)")

  Global.UI.setAttribute("giveToRedItemRed", "active", "false")
  Global.UI.setAttribute("giveToGreenItemGreen", "active", "false")
  Global.UI.setAttribute("giveToBlueItemBlue", "active", "false")

  if saveState.inventory then
    for clr, inv in pairs(saveState.inventory) do
      for item, count in pairs(inv) do
        setItemCount(clr, item, count)
      end
    end
  end

  if saveState.frags then
    fragsScored = saveState.frags.scored
    for name, tint in pairs(saveState.frags.tint) do
      Global.UI.setAttribute(name, "color", tint)
      Global.UI.setAttribute(string.gsub(name, "Image", ""), "tooltip", "Double click to remove")
    end
  end

  if saveState.order then
    for clr, order in pairs(saveState.order) do
      activateMarineOrder(clr, order)
    end
  end
end

function onLoad(saveStr)
  if saveStr ~= "" then
    saveState = JSON.decode(saveStr)
  end
end


function onSave()
  local inventory = {Red = {}, Green = {}, Blue = {}}
  for item in pairs(saveStateItems) do
    for _,clr in ipairs(constants.allMarineColors) do
      inventory[clr][item] = getItemCount(clr, item)
    end
  end
  local frags = {scored=fragsScored, tint={}}
  for i = 1, fragsScored do
    local fieldName = "fragImage" .. i
    frags.tint[fieldName] = Global.UI.getAttribute(fieldName, "color")
  end
  self.script_state = JSON.encode({inventory=inventory, frags=frags, order=marineOrder})
end

function showFrags(player, value, id)
  instances.vis.call(
    "toggleInterface", {id="fragsPanel", color=player.color})
end

function updateFrag(player, value, id)
  if instances.click.call("isDoubleClick",
    {color = player.color, id = id})
  then
    if player.color ~= "White" then
      broadcastToColor("Only white player can change frags",
        player.color,
        stringColorToRGB(player.color))
      return
    end

    local buttonNumber = string.match(id, "(%d+)")
    buttonNumber = tonumber(buttonNumber, 10)
    if buttonNumber > fragsScored then
      -- inactive button is hit, add new frag
      addFrag("manual")
    else
      -- active button is hit, remove frag
      -- it's the only way to remove frag
      Global.UI.setAttribute("fragImage" .. fragsScored, "color", "rgba(0.4, 0.4, 0.4, 1)")
      Global.UI.setAttribute("frag" .. fragsScored, "tooltip", "Double click to add")
      fragsScored = fragsScored-1
      broadcastToAll("Frag manually removed! Total: " .. fragsScored, Color.Orange)
    end
  end
end

-- source must be "manual", "<Color> died" or "full deck"
function addFrag(source)
  if (fragsScored >= fragLimit) then
    broadcastToAll("Can't add more frags! Already " .. fragLimit, Color.Orange)
  end

  fragsScored = fragsScored + 1

  Global.UI.setAttribute(
    "fragImage" .. fragsScored,
    "color",
    fragTintColors[source] or "White")
  Global.UI.setAttribute("frag" .. fragsScored, "tooltip", "Double click to remove")
  broadcastToAll("New frag (" .. source .. ")! Total: " .. fragsScored, Color.Orange)

  instances.vis.call(
    "showInterface",
    {id="fragsPanel", color="White|Red|Green|Blue"})

end

function resetFrags()
  for i = 1, fragsScored do
    Global.UI.setAttribute("fragImage" .. i, "color", "rgba(0.4, 0.4, 0.4, 1)")
    Global.UI.setAttribute("frag" .. i, "tooltip", "Double click to add")
  end
  fragsScored = 0
end

function onInventoryItemClick(player, value, id)
  local item, itemColor = utils.stripXmlFieldColor(string.gsub(id, "InvButton", ""))

  if player.color ~= "White" and player.color ~= itemColor then
    broadcastToColor("This is not your inventory", player.color, player.color)
    return
  end

  --TODO check check berserk, check availability and not for white
  -- Set attack parameters
  if not invMode[player.color].action and gunStats[item] then
    prepareGunAttack(player.color, item)

  elseif not invMode[player.color].action and orderItems[item] then
    activateMarineOrder(player.color, item)

  elseif invMode[player.color].action == "gainItem" then
    if obtainableItems[item] then
      if adjustItemCount(itemColor, item, 1) == 1 then
        printToAll(utils.getActorLabel(itemColor) .. " gained " .. item, player.color)
      else
        broadcastToColor("Can't have more", player.color, player.color)
      end
    else
      broadcastToColor("Can't gain " .. item, player.color, player.color)
    end

  elseif invMode[player.color].action == "loseItem" then
    if obtainableItems[item] then
      if adjustItemCount(itemColor, item, -1) == -1 then
        printToAll(utils.getActorLabel(itemColor) .. " lost " .. item, player.color)
      else
        broadcastToColor("Can't lose what is already missing", player.color, player.color)
      end
    else
      broadcastToColor("Can't lose " .. item, player.color, player.color)
    end

  elseif string.find(invMode[player.color].action or "", "giveTo") then
    transferItem(player.color, itemColor, utils.getColor(invMode[player.color].action), item)
  end

  if not invMode[player.color].sticky then
    clearInvMode(player.color)
  end
end

function prepareGunAttack(player_color, item)
  local marineColor = (player_color == "White")
    and instances.vis.call("getActiveInventoryForWhite")
    or player_color

  local marine = utils.getMarine(marineColor)
  if haveItem(marineColor, "berserk") and item ~= "fist" then
    broadcastToColor(marine.getName() .. " can't use weapons while berserk, yet proceeding as usual",
      player_color,
      player_color)
  elseif not haveItem(marineColor, item) then
    broadcastToColor(marine.getName() .. " doesn't possess this weapon, yet proceeding as usual",
      player_color,
      player_color)
  elseif gunStats[item].ammo ~= "" and not haveItem(marineColor, gunStats[item].ammo) then
    broadcastToColor(marine.getName() .. " doesn't have ammo, yet proceeding as usual",
      player_color,
      player_color)
  end

  printToColor(marine.getName() .." uses " .. item .. " on... <target via Num1>",
    player_color,
    Color.Grey)

  if gunStats[item].reminder and gunStats[item].reminder ~= "" then
    printToColor("Reminder: " .. gunStats[item].reminder, player_color, Color.Grey)
  end

  local weaponType = (item == "fist" or item == "chainsaw") and "melee" or "range"

  local params = {
    color = player_color,
    dice  = gunStats[item].attack,
    bonus = gunStats[item].attackMod or "none",
    meta = {weaponType = weaponType}}

  instances.calc.call("configure", params)
  if player_color == "White" then
    instances.hotkeys.call("saveAttackingCharacter", {color = player_color, char = marine})
  end
end

function showInventory(player, value, id)
  clearInvMode(player.color)
  instances.vis.call("toggleInterface", {id="inventoryPanel"..value, color=player.color})
end

function onModeControlClick(player, value, id)
  if instances.click.call("isDoubleClick",
    {color = player.color, id = id})
  then
    setInvMode(player.color, lastInvMode[player.color].action,  true)
  else
    local curMode = invMode[player.color].action
    local newMode = utils.stripXmlFieldColor(id)

    -- Don't enter give mode in case marines aren't adjacent
    if string.find(newMode, "giveTo") then
      local marineColor = (player.color == "White")
        and instances.vis.call("getActiveInventoryForWhite")
        or player.color
      local givingMarine = utils.getMarine(marineColor)
      local takingMarine = utils.getMarine(utils.getColor(newMode))
      local dist = utils.getDistance(givingMarine, takingMarine)
      if dist ~= 1 then
        broadcastToColor(takingMarine.getName() .. " must be on adjacent space", player.color, player.color)
        instances.click.call("markNextClickAsSignle", {color = player.color, id = id})
        return
      end
    end

    clearInvMode(player.color)
    if curMode ~= newMode then
      setInvMode(player.color, newMode,  false)
    end
  end
end

function clearInvMode(player_color)
  if invMode[player_color].action then
    local textColor = utils.getColor(invMode[player_color].action) or "White"
    Global.UI.setAttribute(invMode[player_color].action .. player_color, "color", "rgba(0, 0, 0, 0.95)")
    Global.UI.setAttribute(invMode[player_color].action .. player_color, "textColor", textColor)
    invMode[player_color].action = nil
  end
  invMode[player_color].sticky = nil
end

function setInvMode(player_color, action, sticky)
  if not action then -- empty action should be set with clear
    return
  end

  invMode[player_color].action = action
  invMode[player_color].sticky = sticky
  lastInvMode[player_color].action = action
  if not sticky then
    Global.UI.setAttribute(invMode[player_color].action .. player_color, "color", "yellow")
  else
    Global.UI.setAttribute(invMode[player_color].action .. player_color, "color", "orange")
  end

end


function onAutopickClick(player, value, id)
  local marineColor = (player.color ~= "White") and player.color
    or instances.vis.call("getActiveInventoryForWhite")

  local marine = utils.getMarine(marineColor)
  local hitTable = Physics.cast(
    {origin=marine.getPosition(), direction={0,-1,0}, debug=false, max_distance=0.5})

  local pickWorked = false
  for _, hit in ipairs(hitTable) do
    local item = pickableTokens[hit.hit_object.getName()]
    if hit.hit_object.tag == "Card" and item then

      local picked = true
      local amount = 1
      if item == "health" then
        amount = 0 -- no item is stored, health is applied immediately
        picked = marine.call("onHealthPickup", marineColor)
      elseif item == "berserk" then
        amount = 3
      end

      if picked then
        adjustItemCount(marineColor, item, amount)
        printToAll(marine.getName() .. " picked " .. item, player.color)
        hit.hit_object.destruct()
      end

      pickWorked = pickWorked or picked
    end
  end

  if not pickWorked then
    broadcastToColor("No pickable items under " .. marine.getName() .. " figurine",
      player.color,
      player.color)
  end
end

-- all colors can be different: white player forcing blue marine to share with red one
function transferItem(player_color, givingColor, takingColor, item)
  if not transferableItems[item] then
    if item ~= "fist" then
      broadcastToColor("Can't transfer " .. item, player_color, player_color)
    else
      broadcastToColor("Is it attempt at fistfight or fisting?", player_color, text_color)
    end
    return
  end

  if not haveItem(givingColor, item) then
    broadcastToColor("Can't transfer " .. item .. " since none is owned",
      player_color,
      player_color)
  elseif fullWithItem(takingColor, item) then
    broadcastToColor("Can't transfer " .. item .. " since recipient is already full",
    player_color,
    player_color)
  else
    adjustItemCount(givingColor, item, -1)
    adjustItemCount(takingColor, item, 1)
    broadcastToAll(utils.getActorLabel(givingColor) .. " transfered " .. item ..
      " to " .. utils.getActorLabel(takingColor), player_color)
  end
end

function getItemCount(player_color, item)
  if player_color == "White" then
    print("WTF! getItemCount for White, " .. item)
    return
  end
  return tonumber(Global.UI.getAttribute(item.."InvText"..player_color, "text"), 10)
end

function haveItem(player_color, item)
  return getItemCount(player_color, item) > 0
end

function fullWithItem(player_color, item)
  return getItemCount(player_color, item) >= itemLimit[item]
end

function setItemCount(color, item, amount)
  adjustItemCount(color, item, amount - getItemCount(color, item))
end

-- returns actual change in item count
function adjustItemCount(player_color, item, diff)
  if player_color == "White" then
    print("WTF! adjustItemCount for White, " .. item .. ", " .. diff)
    return
  end
  if diff == 0 then
     return 0
  end

  local originalCount = getItemCount(player_color, item)
  local count = originalCount
  count = count + diff
  if count < 0 then
    count = 0
  end

  if item == "armor" and count < 1 then
    count = 1
  end

  local changedItemColors = {player_color}
  if sharedItems[item] then
    changedItemColors = constants.allMarineColors
  end

  if count > itemLimit[item] then
    count = itemLimit[item]
  end

  for _, clr in ipairs(changedItemColors) do
    Global.UI.setAttribute(item.."InvText"..clr, "text", count)

    if count >= (countActivationThreshold[item] or 1) then
      Global.UI.setAttribute(item.."InvText"..clr, "active", "true")
    else
      Global.UI.setAttribute(item.."InvText"..clr, "active", "false")
    end

    if count >= 1 then
      Global.UI.setAttribute(item.."InvImage"..clr, "color", "White")
    else
      Global.UI.setAttribute(item.."InvImage"..clr, "color", "rgba(0.4, 0.4, 0.4, 1)")
    end

    if item == "armor" then
      utils.getMarine(clr).call("onArmorSet", count)
    end
  end

  return count - originalCount
end

function onPlayerTurnEnd(turnColor, nextTurnColor)
 -- when enabling turn system, first event contains neither nil nor "",
 -- but still doesn't have any valid color
  if turnColor and string.find(turnColor, "%a") and turnColor ~= "White" then
    if adjustItemCount(turnColor, "berserk", -1) == -1 then
      printToAll("Turn end: decreased berserk for " .. utils.getMarine(turnColor).getName(),
        Color.Orange)
    end
  end
end

function onPlayerTurnStart(turnColor, prevTurnColor)
 -- when enabling turn system, first event contains neither nil nor "",
 -- but still doesn't have any valid color
  if turnColor and string.find(turnColor, "%a") and turnColor ~= "White" then
    if marineOrder[turnColor] == "guard"
      or marineOrder[turnColor] == "dodge"
      or marineOrder[turnColor] == "heal"
    then
      printToAll("Turn start: removed " .. marineOrder[turnColor] .. " from "
        .. utils.getMarine(turnColor).getName(),
        Color.Orange)
      activateMarineOrder(turnColor, nil)
    end
  end
end

function onMarineWounded(color)
  if marineOrder[color] == "aim" or marineOrder[color] == "guard" then
    broadcastToAll("Wound removed " .. marineOrder[color] .. " from "
      .. utils.getMarine(color).getName(),
      Color.Orange)
    activateMarineOrder(color, nil)
  end
end

function onMarineDeath(color)
  addFrag(color.." died")

  --restore armor, clear berserk and all orders
  setItemCount(color, "armor", 2)
  setItemCount(color, "berserk", 0)
  if marineOrder[color] then
    activateMarineOrder(color, nil)
  end
  printToAll("On death cleared berserk, order, extra armor", Color.Orange)
end

function onMarineArmorSet(req)
  setItemCount(req.color, "armor", req.armor)
end

function activateMarineOrder(player_color, newOrder)
  local marineColor = (player_color == "White")
    and instances.vis.call("getActiveInventoryForWhite")
    or player_color

  if not newOrder and not marineOrder[marineColor] then
    broadcastToColor("How on earth do you try to remove empty order?", player_color, player_color)

  elseif newOrder and marineOrder[marineColor] and newOrder ~= marineOrder[marineColor] then
    broadcastToColor("Marine can't have more than one order", player_color, player_color)

  elseif not newOrder or newOrder == marineOrder[marineColor] then
    setItemCount(marineColor, marineOrder[marineColor], 0)
    marineOrder[marineColor] = nil
    utils.getMarine(marineColor).call("onOrderChange", marineOrder[marineColor])

  elseif not marineOrder[marineColor] then
    marineOrder[marineColor] = newOrder
    setItemCount(marineColor, marineOrder[marineColor], 1)
    utils.getMarine(marineColor).call("onOrderChange", marineOrder[marineColor])
  end

end

function resetInventoryPartial()
  printToAll("Inventory is preserved except for keys, berserk and orders", Color.Orange)
  for _, clr in ipairs(constants.allMarineColors) do
    setItemCount(clr, "berserk", 0)
    if marineOrder[clr] then
      activateMarineOrder(clr, nil)
    end
  end

  setItemCount("Blue", "bluekey", 0)
  setItemCount("Blue", "yellowkey", 0)
  setItemCount("Blue", "redkey", 0)
end

function resetInventoryFull(difficulty)
  local shellCount = 5 - utils.getMarineCount() + startingAmmoModifier[difficulty]

  for _, clr in ipairs(constants.allMarineColors) do
    for item in pairs(saveStateItems) do
      if item == "armor" then
        setItemCount(clr, item, 2)
      elseif item == "shell" then
        setItemCount(clr, item, shellCount)
      else
        setItemCount(clr, item, 0)
      end
    end

    if marineOrder[clr] then
      activateMarineOrder(clr, nil)
    end
  end
end
