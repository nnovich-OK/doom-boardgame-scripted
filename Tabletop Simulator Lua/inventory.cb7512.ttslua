fragsScored = 0
fragLimit = 6

fragTintColors = {
  ["Red died"]="rgba(1, 0.6, 0.6, 1)",
  ["Green died"]="rgba(0.6, 1, 0.6, 1)",
  ["Blue died"]="rgba(0.6 0.6, 1, 1)",
}

invMode = {Red={}, Green={}, Blue={}, White={}}


countActivationThreshold = {
  fist = 2,
  chainsaw = 2,
  pistol = 2,
  machinegun = 2,
  shotgun = 2,
  chaingun = 2,
  grenade = 2,
  launcher = 2,
  plasma = 2,
  bfg = 2,

  bluekey = 2,
  yellowkey = 2,
  redkey = 2,
}

gunStats = {
  fist = {
    ammo = "",
    attack = {"red"},
    melee = true,
    attackMod = {},
    reminder = "",
  },

  chainsaw = {
    ammo = "",
    attack = {"red"},
    melee = true,
    attackMod = {deadly=1},
    reminder = "sweep",
  },

  pistol = {
    ammo = "shell",
    attack = {"yellow", "green2"},
    melee = false,
    attackMod = {},
    reminder = "",
  },

  machinegun = {
    ammo = "shell",
    attack = {"yellow", "blue2", "green2"},
    melee = false,
    attackMod = {accuracy=2},
    reminder = "",
  },

  shotgun = {
    ammo = "shell",
    attack = {"red", "blue1"},
    melee = false,
    attackMod = {deadly=1},
    reminder = "blow-through",
  },

  chaingun = {
    ammo = "shell",
    attack = {"red", "green1", "green2"},
    melee = false,
    attackMod = {accuracy=1},
    reminder = "blow-through",
  },

  grenade = {
    ammo = "rocket",
    attack = {"yellow", "blue1", "blue2"},
    melee = false,
    attackMod = {},
    reminder = "seeking, blast 1",
  },

  launcher = {
    ammo = "rocket",
    attack = {"yellow", "blue2", "green1", "green2"},
    melee = false,
    attackMod = {},
    reminder = "blast 1, knockback",
  },

  plasma = {
    ammo = "cell",
    attack = {"red", "yellow", "blue1", "green1"},
    melee = false,
    attackMod = {accuracy=1},
    reminder = "",
  },

  bfg = {
    ammo = "cell",
    attack = {"red", "yellow", "blue1", "green1", "blue2", "green2"},
    melee = false,
    attackMod = {deadly=1},
    reminder = "blast 2",
  },

}

function onPreprocFinished()
  Global.UI.setAttribute("inventoryPanel" .. "Red", "color", "rgba(0.14, 0, 0, 0.95)")
  Global.UI.setAttribute("inventoryPanel" .. "Green", "color", "rgba(0, 0.1, 0, 0.95)")
  Global.UI.setAttribute("inventoryPanel" .. "Blue", "color", "rgba(0, 0, 0.1, 0.95)")

  Global.UI.setAttribute("inventoryPanel" .. "Red", "visibility", "")
  Global.UI.setAttribute("inventoryPanel" .. "Green", "visibility", "")
  Global.UI.setAttribute("inventoryPanel" .. "Blue", "visibility", "")

  Global.UI.setAttribute("giveToRedItemRed", "active", "false")
  Global.UI.setAttribute("giveToGreenItemGreen", "active", "false")
  Global.UI.setAttribute("giveToBlueItemBlue", "active", "false")
end

function showFrags(player, value, id)
  Global.call("instances").vis.call(
    "toggleInterface", {id="fragsPanel", color=player.color})
end

function updateFrag(player, value, id)
  if Global.call("instances").click.call("isDoubleClick",
    {color = player.color, id = id})
  then
    if player.color ~= "White" then
      broadcastToColor("Only white player can change frags",
        player.color,
        stringColorToRGB(player.color))
      return
    end

    local buttonNumber = string.match(id, "(%d+)")
    buttonNumber = tonumber(buttonNumber, 10)
    if buttonNumber > fragsScored then
      -- inactive button is hit, add new frag
      addFrag("manual")
    else
      -- active button is hit, remove frag
      -- it's the only way to remove frag
      Global.UI.setAttribute("fragImage" .. fragsScored, "color", "rgba(0.4, 0.4, 0.4, 1)")
      Global.UI.setAttribute("frag" .. fragsScored, "tooltip", "Double click to add")
      fragsScored = fragsScored-1
      broadcastToAll("Frag manually removed! Total: " .. fragsScored, Color.Orange)
    end
  end
end

-- source must be "manual", "<Color> died" or "full deck"
function addFrag(source)
  if (fragsScored >= fragLimit) then
    broadcastToAll("Can't add more frags! Already " .. fragLimit, Color.Orange)
  end

  fragsScored = fragsScored + 1

  Global.UI.setAttribute(
    "fragImage" .. fragsScored,
    "color",
    fragTintColors[source] or "White")
  Global.UI.setAttribute("frag" .. fragsScored, "tooltip", "Double click to remove")
  broadcastToAll("New frag (" .. source .. ")! Total: " .. fragsScored, Color.Orange)

  Global.call("instances").vis.call(
    "showInterface",
    {id="fragsPanel", color="White|Red|Green|Blue"})

end

function onInventoryItemClick(player, value, id)
  local item, itemColor = Global.call(
    "stripXmlFieldColor",
    (string.gsub(id, "InvButton", "")))


  --TODO check check berserk, check availability and not for white
  -- Set attack parameters
  if not invMode[player.color].action and gunStats[item] then
    prepareGunAttack(player.color, item)
  end

  if invMode[player.color].action == "gainItem" then
    adjustItemCount(itemColor, item, 1)
  end

  if invMode[player.color].action == "loseItem" then
    adjustItemCount(itemColor, item, -1)
  end

  if not invMode[player.color].sticky then
    clearInvMode(player.color)
  end
end

function prepareGunAttack(player_color, item)
  if player_color ~= "White" then
    printToColor(player_color.." Marine uses " .. item .. " on... <target via Num1>",
      player_color,
      Color.Grey)
  else
    printToColor("Marine uses " .. item,
      player_color,
      Color.Grey)
  end


  if gunStats[item].reminder and gunStats[item].reminder ~= "" then
    printToColor("Reminder: " .. gunStats[item].reminder, player_color, Color.Grey)
  end

  local params = {
    color = player_color,
    dice  = gunStats[item].attack,
    bonus = gunStats[item].attackMod or "none",}

  Global.call("instances").calc.call("configure", params)
  return
end

function showInventory(player, value, id)
  Global.call("instances").vis.call("toggleInterface", {id="inventoryPanel"..value, color=player.color})
end

function onModeControlClick(player, value, id)
  if Global.call("instances").click.call("isDoubleClick",
    {color = player.color, id = id})
  then
    setInvMode(player.color, invMode[player.color].action,  true)
  else
    local curMode = invMode[player.color].action
    local newMode = Global.call("stripXmlFieldColor", id)
    clearInvMode(player.color)
    if curMode ~= newMode then
      setInvMode(player.color, newMode,  false)
    end
  end
end

function clearInvMode(player_color)
  if invMode[player_color].action then
    Global.UI.setAttribute(invMode[player_color].action .. player_color, "color", "rgba(0, 0, 0, 0.95)")
    Global.UI.setAttribute(invMode[player_color].action .. player_color, "textColor", "White")
    invMode[player_color].action = nil
  end
  invMode[player_color].sticky = nil
end

function setInvMode(player_color, action, sticky)
  if not action then -- empty action should be set with clear
    return
  end

  invMode[player_color].action = action
  invMode[player_color].sticky = sticky
  if not sticky then
    Global.UI.setAttribute(invMode[player_color].action .. player_color, "color", "yellow")
  else
    Global.UI.setAttribute(invMode[player_color].action .. player_color, "color", "orange")
  end

end


function onAutopickClick(player, value, id)
  broadcastToColor("Not yet implemented. Wanna help?", player.color, player.color)
end

function adjustItemCount(player_color, item, diff)
  local count = tonumber(Global.UI.getAttribute(item.."InvText"..player_color, "text"), 10)
  count = count + diff
  if count < 0 then
    count = 0
  end

  Global.UI.setAttribute(item.."InvText"..player_color, "text", count)

  if count >= (countActivationThreshold[item] or 1) then
    Global.UI.setAttribute(item.."InvText"..player_color, "active", "true")
  else
    Global.UI.setAttribute(item.."InvText"..player_color, "active", "false")
  end

  if count >= 1 then
    Global.UI.setAttribute(item.."InvImage"..player_color, "color", "White")
  else
    Global.UI.setAttribute(item.."InvImage"..player_color, "color", "rgba(0.4, 0.4, 0.4, 1)")
  end

end