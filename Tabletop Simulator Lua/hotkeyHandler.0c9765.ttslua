require("instances")
require("utils")

mnstStats = {
  Zombie     = {speed=3, armor=2, health=2,
                attack = {"red", "blue1"},
                melee=true,
                attackMod = {},
                reminder = "",
              },

  Trite      = {speed=5, armor=1, health=1,
                attack = {"red", "green1"},
                melee=true,
                attackMod = {},
                reminder = "scuttle",
              },

  Imp        = {speed=4, armor=2, health=1,
                attack = {"yellow", "blue2"},
                attackMod = {accuracy=1},
                reminder = "",
              },

  Demon      = {speed=4, armor=3, health=2,
                attack = {"red", "blue1", "blue2"},
                melee=true,
                attackMod = {},
                reminder = "watchful",
              },

  Mancubus   = {speed=2, armor=3, health=3,
                attack = {"yellow", "green2" ,"blue2"},
                attackMod = {deadly=1},
                reminder = "blow-through",
              },

  Archvile   = {speed=4, armor=3, health=2,
                attack = {"yellow", "green1", "green2" ,"blue2"},
                attackMod = {accuracy=4},
                reminder = "aimed",
            },

  Hellknight = {speed=3, armor=4, health=3,
                attack = {"red", "blue1", "blue2"},
                melee=true,
                attackMod = {},
                reminder = "sweep, knockback",
              },

  Cyberdemon = {speed=4, armor=5, health=4,
                attack = {"red", "yellow", "green1", "green2", "blue1", "blue2"},
                attackMod = {},
                reminder = "aimed",
              },
}


local attackingChar = {}
local monsterActivationIndex = 0
local gmOut = false

-- Local methods declaration
local getMonsterStats
local saveAttackingCharacterHovered
local prepareAttackParameters
local findMonsterToActivate
local renameHoveredMonsterToGrey


function onScriptingButtonDown(index,  player_color)
  if index == 10 then
    saveAttackingCharacterHovered(player_color)

  elseif index == 1 then
    prepareAttackParameters(player_color)

  elseif index == 7 then
    findMonsterToActivate(player_color)

  elseif index == 6 and player_color=="White" then
    local greeting = gmOut and ": I'm back!" or ": I'm out!"
    gmOut = not gmOut
    Player[player_color].blindfolded = not Player[player_color].blindfolded
    broadcastToAll(Player[player_color].steam_name..greeting, text_color)

  elseif index == 5 and player_color == "White" then
    renameHoveredMonsterToGrey(player_color)

  end

end

function renameHoveredMonsterToGrey(player_color)
  local obj = Player[player_color].getHoverObject()
  if obj and utils.isMonster(obj) then
    instances.creator.call("onRenamedToGrey", obj.getName())
    obj.setColorTint(Color.Black)
    obj.setName(string.gsub(obj.getName(), "^(%w+)", "Grey"))
  else
    broadcastToColor("Hotkey is intended to rename/recolor to grey monster which is hovered over.",
      player_color, player_color)
  end
end

function getMonsterStats(name)
  for k,v in pairs(mnstStats) do
    if (string.find(name, k, 1, true)) then
      return v
    end
  end
end

function saveAttackingCharacterHovered(player_color)
  -- set attacker, wait for target
  if attackingChar[player_color] then
    attackingChar[player_color].highlightOff()
    attackingChar[player_color] = nil
  end

  local candidate = Player[player_color].getHoverObject()
  if not candidate or not utils.isCharacter(candidate) then
    broadcastToColor(
    "Hotkey is intended to mark figurine as attacker. " ..
    "Please hover your pointer over attacking character first.",
      player_color,
      stringColorToRGB(player_color))
    return
  end

  printToColor(candidate.getName() .. " attacks... <target via Num1>",
    player_color,
    Color.Grey)
  saveAttackingCharacter({color = player_color, char = candidate})
end

function saveAttackingCharacter(req)
  attackingChar[req.color] = req.char
  attackingChar[req.color].highlightOn(stringColorToRGB(req.color), 3600)
  instances.creator.call("onAttackerSet", {color = req.color, attacker=req.char})
end

function prepareAttackParameters(player_color)
  if not attackingChar[player_color] then
    if player_color == "White" then
      broadcastToColor(
        "You are trying to mark figurine hovered over as a target, " ..
        "but you need to mark attacker first with Num0",
        player_color,
        stringColorToRGB(player_color))
      return
    else
      attackingChar[player_color] = utils.getMarine(player_color)
      if not attackingChar[player_color] then
        broadcastToColor("Can't find your marine figure",
          player_color,
          stringColorToRGB(player_color))
        return
      end
    end
  end

  local target = Player[player_color].getHoverObject()
  if not target or not utils.isCharacter(target) then
    broadcastToColor(
      "Hotkey is intended to mark figurine as a target." ..
      "Please hover your pointer over targeted character first.",
      player_color,
      stringColorToRGB(player_color))
    return
  end


  printToColor(attackingChar[player_color].getName() .. " attacks "
    .. target.getName() .. ". Ready to roll!",
    player_color,
    Color.Grey)

  local isMelee = false

  -- ATTACKER PARAMETERS: dice, accuracy and deadly bonuses
  --                      set for monster attacks only
  local params = {color=player_color}
  if utils.isMonster(attackingChar[player_color]) then
    local stats = getMonsterStats(attackingChar[player_color].getName()) --guaranteed to exist
    params["dice"] = stats.attack
    params["bonus"] = stats.attackMod or "none"

    isMelee = stats.melee or false

    if stats.reminder and stats.reminder ~= "" then
      printToColor("Reminder: " .. stats.reminder, player_color, Color.Grey)
    end
  end

  -- TARGET PARAMETERS: distance and armor
  local armor = 1
  if utils.isMonster(target) then
    armor = getMonsterStats(target.getName()).armor
  else
    armor = tonumber(target.UI.getAttribute("armor", "text"))
  end

  local dist = utils.getDistance(attackingChar[player_color], target)
  if dist >= 15 then dist = 15 end
  if isMelee then
    dist = 0
  end

  params["target"] = {armor=armor, distance=dist}

  -- indicate with highlight
  attackingChar[player_color].highlightOn(stringColorToRGB(player_color), 5)
  attackingChar[player_color] = nil
  target.highlightOn(stringColorToRGB(player_color), 5)

  instances.calc.call("configure", params)
end

function findMonsterToActivate(player_color)
  if player_color ~= "White" then
    return
  end

  local allReadyMonsters = {}

  for _, obj in ipairs(getAllObjects()) do
    if utils.isMonster(obj) and obj.call("getActiveStatus") == "ready" then
      table.insert(allReadyMonsters, obj)
    end
  end

  if #allReadyMonsters == 0 then
    broadcastToColor("All monsters have already acted", player_color, player_color)
  else
    monsterActivationIndex = monsterActivationIndex % #allReadyMonsters
    monsterActivationIndex = monsterActivationIndex + 1
    Player[player_color].pingTable(allReadyMonsters[monsterActivationIndex].getPosition())
  end
end