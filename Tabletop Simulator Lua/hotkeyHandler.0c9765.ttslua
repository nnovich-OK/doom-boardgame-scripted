require("instances")
require("utils")
require("dbg")



local attackingChar = {}
local monsterActivationIndex = 0
local gmOut = false

-- Local methods declaration
local saveAttackingCharacterHovered
local prepareAttackParameters
local findMonsterToActivate
local renameHoveredMonsterToGrey
local getStrongestNeighbourArmor


function onScriptingButtonDown(index,  player_color)
  if index == 10 then
    saveAttackingCharacterHovered(player_color)

  elseif index == 1 then
    prepareAttackParameters(player_color)

  elseif index == 7 then
    findMonsterToActivate(player_color)

  elseif index == 9 and player_color == "White" then
    local enabled = not instances.path.getVar("pathTrackingEnabled")
    local msg = "Move trails are " .. (enabled and "ON" or "OFF")
    broadcastToAll(msg, "Orange")
    instances.path.setVar("pathTrackingEnabled", enabled)

  elseif index == 6 and player_color=="White" then
    local greeting = gmOut and ": I'm back!" or ": I'm out!"
    gmOut = not gmOut
    Player[player_color].blindfolded = not Player[player_color].blindfolded
    broadcastToAll(Player[player_color].steam_name..greeting, player_color)

  elseif index == 5 and dbg.cfg.scanEnabled and player_color == "White" then
    renameHoveredMonsterToGrey(player_color)

  elseif index == 5 and dbg.cfg.marineMapAccess and player_color ~= "White" then
    instances.vis.call("toggleInterface", {id="newGameButton", color=player_color})
    utils.getGuide().setInvisibleTo({})

  elseif index == 8 and dbg.cfg.miscHotkeyEnable then
    local obj = Player[player_color].getHoverObject()
    print(obj.getLuaScript())

  end

end

function renameHoveredMonsterToGrey(player_color)
  local obj = Player[player_color].getHoverObject()
  if obj and utils.isMonster(obj) then
    instances.creator.call("onRenamedToGrey", obj.getName())
    obj.setColorTint(Color.Black)
    obj.setName(string.gsub(obj.getName(), "^(%w+)", "Grey"))
  else
    broadcastToColor("Hotkey is intended to rename/recolor to grey monster which is hovered over.",
      player_color, player_color)
  end
end

function saveAttackingCharacterHovered(player_color)
  -- set attacker, wait for target
  if attackingChar[player_color] then
    attackingChar[player_color].highlightOff()
    attackingChar[player_color] = nil
  end

  local candidate = Player[player_color].getHoverObject()
  if not candidate or not utils.isCharacter(candidate) then
    broadcastToColor(
    "Hotkey is intended to mark figurine as attacker. " ..
    "Please hover your pointer over attacking character first.",
      player_color,
      stringColorToRGB(player_color))
    return
  end

  printToColor(candidate.getName() .. " attacks... <target via Num1>",
    player_color,
    Color.Grey)
  saveAttackingCharacter({color = player_color, char = candidate})
end

function saveAttackingCharacter(req)
  attackingChar[req.color] = req.char
  attackingChar[req.color].highlightOn(stringColorToRGB(req.color), 3600)
  instances.creator.call("onAttackerSet", {color = req.color, attacker=req.char})
end

function prepareAttackParameters(player_color)
  if not attackingChar[player_color] then
    if player_color == "White" then
      broadcastToColor(
        "You are trying to mark figurine hovered over as a target, " ..
        "but you need to mark attacker first with Num0",
        player_color,
        stringColorToRGB(player_color))
      return
    else
      attackingChar[player_color] = utils.getMarine(player_color)
      if not attackingChar[player_color] then
        broadcastToColor("Can't find your marine figure",
          player_color,
          stringColorToRGB(player_color))
        return
      end
    end
  end

  local targetCell = Player[player_color].getPointerPosition()
  targetCell.x = math.floor(targetCell.x) + 0.5
  targetCell.z = math.floor(targetCell.z) + 0.5
  targetCell.y = 0.5
  Player[player_color].pingTable(targetCell)

  local target = utils.getObjectAt(targetCell, utils.isCharacter)
  target = target or utils.getObjectAt(targetCell, utils.isBarrel)
  local targetName = target and target.getName() or "empty cell"
  printToColor(attackingChar[player_color].getName() .. " attacks "
    .. targetName .. ". Ready to roll!",
    player_color,
    Color.Grey)

  local isMelee = false
  local blast = 0

  -- ATTACKER PARAMETERS: dice, accuracy and deadly bonuses
  --                      set for monster attacks only
  local params = {color=player_color}
  if utils.isMonster(attackingChar[player_color]) then
    local stats = utils.getMonsterStats(attackingChar[player_color].getName()) --guaranteed to exist
    params["dice"] = stats.attack
    params["bonus"] = stats.attackMod or "none"

    isMelee = stats.melee or false
    blast = stats.blast or 0

    if stats.reminder and stats.reminder ~= "" then
      printToColor("Reminder: " .. stats.reminder, player_color, Color.Grey)
    end
  end

  -- TARGET PARAMETERS: distance and armor
  local dist = utils.getDistance(attackingChar[player_color], targetCell)
  if dist >= 15 then dist = 15 end
  if isMelee then
    dist = 0
  end

  local armor = utils.getArmor(target)
  local neighboursArmor = getStrongestNeighbourArmor(targetCell)
  if blast > 0 then
    armor = neighboursArmor[blast]
  end

  params["target"] = {armor=utils.getArmor(target), distance=dist}
  params["meta"] = {neighboursArmor = neighboursArmor}

  -- indicate with highlight
  attackingChar[player_color].highlightOn(stringColorToRGB(player_color), 5)
  attackingChar[player_color] = nil

  instances.calc.call("configure", params)
end

function findMonsterToActivate(player_color)
  if player_color ~= "White" then
    return
  end

  local allReadyMonsters = {}

  for _, obj in ipairs(getAllObjects()) do
    if utils.isMonster(obj) and obj.call("getActiveStatus") == "ready" then
      table.insert(allReadyMonsters, obj)
    end
  end

  if #allReadyMonsters == 0 then
    broadcastToColor("All monsters have already acted", player_color, player_color)
  else
    monsterActivationIndex = monsterActivationIndex % #allReadyMonsters
    monsterActivationIndex = monsterActivationIndex + 1
    Player[player_color].pingTable(allReadyMonsters[monsterActivationIndex].getPosition())
  end
end

function getStrongestNeighbourArmor(targetCell)
  local rez = {}
  for i = 1, 2 do --currently there are blasts for 1 or 2 radius only
    rez[i] = 1
    local targets = utils.getObjectsInZone(
      targetCell, -- position
      {0,0,0}, -- rotation
      {2*i + 1, 3, 2*i + 1}, -- size
      utils.isCharacter
    )
    for _, target in ipairs(targets) do
      local curArmor = utils.getArmor(target)
      if curArmor > rez[i] then
        rez[i] = curArmor
      end
    end
  end

  return rez
end