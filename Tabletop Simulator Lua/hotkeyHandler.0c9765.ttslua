mnstStats = {
  Zombie     = {speed=3, armor=2, health=2,
                attack = {"red", "blue1"},
                melee=true,
                attackMod = {},
                reminder = "",
              },

  Trite      = {speed=5, armor=1, health=1,
                attack = {"red", "green1"},
                melee=true,
                attackMod = {},
                reminder = "scuttle",
              },

  Imp        = {speed=4, armor=2, health=1,
                attack = {"yellow", "blue2"},
                attackMod = {accuracy=1},
                reminder = "",
              },

  Demon      = {speed=4, armor=3, health=2,
                attack = {"red", "blue1", "blue2"},
                melee=true,
                attackMod = {},
                reminder = "watchful",
              },

  Mancubus   = {speed=2, armor=3, health=3,
                attack = {"yellow", "green2" ,"blue2"},
                attackMod = {deadly=1},
                reminder = "blow-through",
              },

  Archvile   = {speed=4, armor=3, health=2,
                attack = {"yellow", "green1", "green2" ,"blue2"},
                attackMod = {accuracy=4},
                reminder = "aimed",
            },

  Hellknight = {speed=3, armor=4, health=3,
                attack = {"red", "blue1", "blue2"},
                melee=true,
                attackMod = {},
                reminder = "sweep, knockback",
              },

  Cyberdemon = {speed=4, armor=5, health=4,
                attack = {"red", "yellow", "green1", "green2", "blue1", "blue2"},
                attackMod = {},
                reminder = "aimed",
              },
}


local attackingChar = {}

-- Local methods declaration
local isLarge
local getDistance
local getMonsterStats
local saveAttackingCharacter
local prepareAttackParameters


-- return true if figure is 2 or more spaces width in direction of X and Z
function isLarge(figure)
  local bounds = figure.getBounds()
  return {
    x = (bounds.size.x > 1.5),
    z = (bounds.size.z > 1.5)
  }
end

function getDistance(first, second)

  local roundingDelta = {x = 0.5, z = 0.5}
  for _, figure in ipairs({first, second}) do
    local isLargeFigure = isLarge(figure)
    if isLargeFigure.x then
      roundingDelta.x = roundingDelta.x - 0.5
    end

    if isLargeFigure.z then
      roundingDelta.z = roundingDelta.z - 0.5
    end
  end

  local firstPos = first.getPosition()
  local secondPos = second.getPosition()

  local dx = math.floor(math.abs(secondPos.x - firstPos.x) + roundingDelta.x)
  local dz = math.floor(math.abs(secondPos.z - firstPos.z) + roundingDelta.z)

  return math.max(dx, dz)
end


function onScriptingButtonDown(index,  player_color)
  if index == 10 then
    saveAttackingCharacter(player_color)
  end

  if index == 1 then
    prepareAttackParameters(player_color)
  end
end

function getMonsterStats(name)
  for k,v in pairs(mnstStats) do
    if (string.find(name, k, 1, true)) then
      return v
    end
  end
end

function saveAttackingCharacter(player_color)
  -- set attacker, wait for target

  if attackingChar[player_color] then
    attackingChar[player_color].highlightOff()
    attackingChar[player_color] = nil
  end

  local candidate = Player[player_color].getHoverObject()
  if not candidate or not Global.call("isCharacter", candidate) then
    broadcastToColor(
    "Hotkey is intended to mark figurine as attacker. " ..
    "Please hover your pointer over attacking character first.",
      player_color,
      stringColorToRGB(player_color))
    return
  end


  attackingChar[player_color] = candidate
  attackingChar[player_color].highlightOn(stringColorToRGB(player_color), 3600)
  printToColor(attackingChar[player_color].getName() .. " attacks... <target via Num1>",
    player_color,
    Color.Grey)
end


function prepareAttackParameters(player_color)
  if not attackingChar[player_color] then
    if player_color == "White" then
      broadcastToColor(
        "You are trying to mark figurine hovered over as a target, " ..
        "but you need to mark attacker first with Numpad0",
        player_color,
        stringColorToRGB(player_color))
      return
    else
      attackingChar[player_color] = Global.call("getMarine", player_color)
      if not attackingChar[player_color] then
        broadcastToColor("Can't find your marine figure",
          player_color,
          stringColorToRGB(player_color))
        return
      end
    end
  end

  local target = Player[player_color].getHoverObject()
  if not target or not Global.call("isCharacter", target) then
    broadcastToColor(
      "Hotkey is intended to mark figurine as a target." ..
      "Please hover your pointer over targeted character first.",
      player_color,
      stringColorToRGB(player_color))
    return
  end


  printToColor(attackingChar[player_color].getName() .. " attacks "
    .. target.getName() .. ". Ready to roll!",
    player_color,
    Color.Grey)

  local isMelee = false -- TODO: tricky thing for marines
                        -- probably can guess out of: last clicked weapon and single red die in play

  -- ATTACKER PARAMETERS: dice, accuracy and deadly bonuses
  --                      set for monster attacks only
  local params = {color=player_color}
  if Global.call("isMonster", attackingChar[player_color]) then
    local stats = getMonsterStats(attackingChar[player_color].getName()) --guaranteed to exist
    params["dice"] = stats.attack
    params["bonus"] = stats.attackMod or "none"

    isMelee = stats.melee or false

    if stats.reminder and stats.reminder ~= "" then
      printToColor("Reminder: " .. stats.reminder, player_color, Color.Grey)
    end
  end

  -- TARGET PARAMETERS: distance and armor
  local armor = 1
  if Global.call("isMonster", target) then
    armor = getMonsterStats(target.getName()).armor
  else
    armor = tonumber(target.UI.getAttribute("armor", "text"))
  end

  local dist = getDistance(attackingChar[player_color], target)
  if dist >= 15 then dist = 15 end
  if isMelee then
    dist = 0
  end

  params["target"] = {armor=armor, distance=dist}

  -- indicate with highlight
  attackingChar[player_color].highlightOn(stringColorToRGB(player_color), 5)
  attackingChar[player_color] = nil
  target.highlightOn(stringColorToRGB(player_color), 5)

  Global.call("instances").calc.call("configure", params)
end