require("instances")
require("maps")
require("constants")
require("utils")

local campaignLoaded = "Episode 1"
local scenarioLoaded = "Knee Deep in the Dead"
local difficultyLoaded = 3

local campaignToLoad = "Episode 1"
local scenarioToLoad = "Knee Deep in the Dead"
local difficultyToLoad = 3
local keepInvWhenLoading = true


-- Local methods declaration
local refreshPreview

function onLoad()
end

function onNewGameClick(player, value, id)
  instances.vis.call("toggleInterface", {id="scenarioMenu", color=player.color})
end

function onCampaignChanged(player, value, id)
  Global.UI.setAttribute(campaignToLoad.." Dropdown", "active", "false")
  campaignToLoad = value
  Global.UI.setAttribute(campaignToLoad.." Dropdown", "active", "true")
  Global.UI.setAttribute("campaignNotes", "text", maps[campaignToLoad].notes)

  for k in pairs(maps[campaignToLoad].scenarios) do
    scenarioToLoad = k
    break
  end
  refreshPreview()
end

function onScenarioChanged(player, value, id)
  scenarioToLoad = value
  refreshPreview()
end

function refreshPreview()
  Global.UI.setAttribute("scenarioPreview", "image", "PREVIEW "..campaignToLoad.." - "..scenarioToLoad)
end

function onCancelClick(player, value, id)
  instances.vis.call("hideInterface", {id = value, color = player.color})
end

function onDifficultyClick(player, value, id)
  Global.UI.setAttribute("difficulty"..difficultyToLoad, "color", "rgba(0.4, 0.4, 0.4, 1)")
  difficultyToLoad = tonumber(value, 10)
  Global.UI.setAttribute("difficulty"..difficultyToLoad, "color", "White")
end

function onKeepInventoryClick(player, value, id)
  keepInvWhenLoading = string.lower(value) == "true"
end


function onMapChosen(player, value, id)
  instances.vis.call("showInterface", {id = "difficultyMenu", color=player.color})
end

function onDifficultyChosen(player, value, id)
  broadcastToAll("LOADING NEW SCENARIO", Color.Orange)
  printToAll(" Campaign: ".. campaignToLoad, Color.Orange)
  printToAll(" Scenario: ".. scenarioToLoad, Color.Orange)
  printToAll(" Difficulty: "..difficultyToLoad, Color.Orange)
  printToAll(" Keep inventory: " .. tostring(keepInvWhenLoading), Color.Orange)
  instances.vis.call("hideInterface", {id = "difficultyMenu", color = player.color})


  instances.inv.call("resetFrags")
  if keepInvWhenLoading then
    instances.inv.call("resetInventoryPartial")
  else
    instances.inv.call("resetInventoryFull", difficultyToLoad)
    for _, clr in ipairs(constants.allMarineColors) do
      utils.getMarine(clr).call("resetHealth", difficultyToLoad)
    end
  end

  --TODO: clear, then load
end
