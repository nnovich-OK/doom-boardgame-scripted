require("instances")
require("maps")
require("constants")
require("utils")
require("dbg")

local campaignLoaded = "Episode 1"
local scenarioLoaded = "Knee Deep in the Dead"
local difficultyLoaded = 3

local campaignToLoad = "Episode 1"
local scenarioToLoad = "Knee Deep in the Dead"
local difficultyToLoad = 3
local keepInvWhenLoading = false

local revealedAreas = {}

local guideJSON = [[
{
  "Name": "Custom_PDF",
  "Transform": {
    "posX": 0.8479757,
    "posY": 1.16121733,
    "posZ": -32.1827774,
    "rotX": -4.03263822E-09,
    "rotY": 270.0,
    "rotZ": 180.0,
    "scaleX": 4.0,
    "scaleY": 1.0,
    "scaleZ": 4.0
  },
  "Nickname": "Invader Player Guide",
  "Description": "Guide is visible only to white player",
  "GMNotes": "pdf_url_placeholder",
  "ColorDiffuse": {
    "r": 1.0,
    "g": 1.0,
    "b": 1.0
  },
  "Locked": true,
  "Grid": true,
  "Snap": true,
  "IgnoreFoW": false,
  "MeasureMovement": false,
  "DragSelectable": true,
  "Autoraise": true,
  "Sticky": true,
  "Tooltip": true,
  "GridProjection": false,
  "HideWhenFaceDown": false,
  "Hands": false,
  "CustomPDF": {
    "PDFUrl": "pdf_url_placeholder",
    "PDFPassword": "",
    "PDFPage": pdf_page_placeholder,
    "PDFPageOffset": 0
  },
  "LuaScript": "function onLoad()\r\n  self.setInvisibleTo({\"Blue\", \"Green\", \"Red\", \"Grey\"})\r\nend",
  "LuaScriptState": "",
  "XmlUI": "",
  "GUID": "4c5ab8"
}
]]

-- Local methods declaration
local refreshPreview
local loadMap
local updateDifficultyUI

function onLoad(save_state)
  saved_data = JSON.decode(save_state)

  -- XML
  if saved_data then
    if saved_data.campaignLoaded then
      campaignLoaded = saved_data.campaignLoaded
    end
    if saved_data.scenarioLoaded then
      scenarioLoaded = saved_data.scenarioLoaded
    end
    if saved_data.difficultyLoaded then
      difficultyLoaded = saved_data.difficultyLoaded
    end
    if saved_data.revealedAreas then
      revealedAreas = saved_data.revealedAreas
    end
  end

  printToAll("MAP DETAILS", Color.Orange)
  printToAll(" Campaign: " .. campaignLoaded, Color.Orange)
  printToAll(" Scenario: " .. scenarioLoaded, Color.Orange)
  printToAll(" Difficulty: " .. difficultyLoaded, Color.Orange)
end

function onSave()
  local save_state = JSON.encode({
    campaignLoaded = campaignLoaded,
    scenarioLoaded = scenarioLoaded,
    difficultyLoaded = difficultyLoaded,
    revealedAreas = revealedAreas,
  })

  self.script_state = save_state
end

function onNewGameClick(player, value, id)
  instances.vis.call("toggleInterface", {id="scenarioMenu", color=player.color})
end

function onCampaignChanged(player, value, id)
  Global.UI.setAttribute(campaignToLoad.." Dropdown", "active", "false")
  campaignToLoad = value
  Global.UI.setAttribute(campaignToLoad.." Dropdown", "active", "true")
  Global.UI.setAttribute("campaignNotes", "text", maps[campaignToLoad].notes)

  for k in pairs(maps[campaignToLoad].scenarios) do
    scenarioToLoad = k
    break
  end
  refreshPreview()
end

function onScenarioChanged(player, value, id)
  scenarioToLoad = value
  refreshPreview()
end

function refreshPreview()
  Global.UI.setAttribute("scenarioPreview", "image", "PREVIEW "..campaignToLoad.." - "..scenarioToLoad)
end

function onCancelClick(player, value, id)
  instances.vis.call("hideInterface", {id = value, color = player.color})
end

function onDifficultyClick(player, value, id)
  updateDifficultyUI(tonumber(value, 10))
end

function updateDifficultyUI(newDificulty)
  Global.UI.setAttribute("difficulty"..difficultyToLoad, "color", "rgba(0.4, 0.4, 0.4, 1)")
  difficultyToLoad = newDificulty
  Global.UI.setAttribute("difficulty"..difficultyToLoad, "color", "White")
end

function onKeepInventoryClick(player, value, id)
  keepInvWhenLoading = string.lower(value) == "true"
end


function onMapChosen(player, value, id)
  instances.vis.call("showInterface", {id = "difficultyMenu", color=player.color})
end

function onDifficultyChosen(player, value, id)
  instances.vis.call("hideInterface", {id = "difficultyMenu", color = player.color})
  loadMap(player.color, campaignToLoad, scenarioToLoad, difficultyToLoad, keepInvWhenLoading)
end

function loadNextScenario(player_color)
  local nextScenarioName = nil
  local isNextOne = false
  for scenarioName in pairs(maps[campaignLoaded].scenarios) do
    if not isNextOne then
      isNextOne = scenarioName == scenarioLoaded
    else
      nextScenarioName = scenarioName
      break
    end
  end

  if nextScenarioName then
    loadMap(player_color, campaignLoaded, nextScenarioName, difficultyLoaded, true)
  else
    -- That was the last scenario. Pop up menu to manually choose another map.
    -- by default keep inventory since this is continuation
    keepInvWhenLoading = true
    Global.UI.setAttribute("keepInventory", "isOn", tostring(keepInvWhenLoading))
    -- by default suggest current difficulty
    updateDifficultyUI(difficultyLoaded)

    instances.vis.call("showInterface", {id="scenarioMenu", color=player_color})
    broadcastToAll("Congradulations! That was the last scenario in the campaign!", player_color)
    printToColor("It's recommended to start each campaign without lingering items, "
      .. "but you can tick \"Keep inventory\" to start any other map as continuation of this one",
      player_color, player_color)
  end
end

function loadMap(player_color, campaign, scenario, difficulty, keepInventory)
  broadcastToAll("LOADING NEW SCENARIO", Color.Orange)
  printToAll(" Campaign: ".. campaign, Color.Orange)
  printToAll(" Scenario: ".. scenario, Color.Orange)
  printToAll(" Difficulty: "..difficulty, Color.Orange)
  printToAll(" Keep inventory: " .. tostring(keepInventory), Color.Orange)


  instances.inv.call("resetFrags")
  instances.luck.call("resetLuck")
  instances.progress.call("reset")
  if keepInventory then
    instances.inv.call("resetInventoryPartial")
  else
    instances.inv.call("resetInventoryFull", difficulty)
    for _, clr in ipairs(constants.allMarineColors) do
      utils.getMarine(clr).call("resetHealth", difficulty)
    end
    instances.score.call("reset")
  end

  -- clear all tiles/tokens
  for _, obj in ipairs(getAllObjects()) do
    if utils.isMonster(obj)
      or utils.isMapTile(obj)
      or utils.isToken(obj)
      or utils.isDoor(obj)
      or utils.isDeckOfTokens(obj)
    then
      obj.destruct()
    end
  end

  campaignLoaded = campaign
  scenarioLoaded = scenario
  difficultyLoaded = difficulty
  revealedAreas = {}
  revealArea({area="Start area", color=player_color})

  -- Set guide URL and page if necessary
  local guide = utils.getGuide()
  local newUrl = maps[campaignLoaded].guide
  local newPage = maps[campaignLoaded].scenarios[scenarioLoaded].guidePage
  if guide.getGMNotes() ~= newUrl then
    guide.destruct()
    local newGuideJSON = string.gsub(guideJSON, "pdf_url_placeholder", newUrl)
    newGuideJSON = string.gsub(newGuideJSON, "pdf_page_placeholder", newPage)
    spawnObjectJSON({json = newGuideJSON})
  else
    guide.Book.setPage(newPage)
  end

  -- enable turns if they aren't already
  if not Turns.enable then
    Turns.enable = true
  end
end

function revealArea(req)
  if revealedAreas[req.area] then
    return
  end

  broadcastToAll("Revealing: "..req.area, req.color)

  local area = maps[campaignLoaded].scenarios[scenarioLoaded].areas[req.area]
  for _, tile in ipairs(area.mapTiles) do
    instances.creator.call("spawnElement", {elem=tile, lock=true})
  end

  for _, door in ipairs(area.doors) do
    if not revealedAreas[door.reveal] then
      instances.creator.call("spawnElement", {elem=door, lock=true})
    end
  end

  for _, tp in ipairs(area.teleporters) do
    instances.creator.call("spawnElement", {elem=tp, lock=true})
  end

  for _, ammo in ipairs(area.ammoTokens) do
    if difficultyLoaded ~= 1 then
      instances.creator.call("spawnElement", {elem=ammo})
    else
      instances.creator.call("spawnElement", {elem=ammo, bonus=ammo.name})
    end
  end

  for _, token in ipairs(area.otherTokens) do
    local lock = false
    if string.find(token.name, "Compass")
      or string.find(token.name, "Encounter")
      or string.find(token.name, "Obstacle")
      or string.find(token.name, "Duct")
      or string.find(token.name, "Barrel")
    then
      lock = true
    end
    local script = nil
    if token.scriptIndex then
      script = area.scripts[token.scriptIndex]
    end
    instances.creator.call("spawnElement", {elem=token, lock=lock, script=script})
  end


  local mnstSpawnDelay = 0
  -- workaround with delay, so each monster has time to spawn and update counter
  -- before spawning next one
  for _, mnst in ipairs(area.colorMonsters) do
    if Player[utils.getColor(mnst.name)].seated or dbg.cfg.pretendAllMarinesSeated then
      Wait.frames(function()
        instances.creator.call("spawnElement", {elem=mnst})
      end,
      mnstSpawnDelay)
      mnstSpawnDelay = mnstSpawnDelay + 5
    end
  end

  for _, mnst in ipairs(area.greyMonsters) do
    Wait.frames(function()
      instances.creator.call("spawnElement", {elem=mnst})
    end,
    mnstSpawnDelay)
    mnstSpawnDelay = mnstSpawnDelay + 5
  end

  for _, mrn in ipairs(area.marines) do
    local color = utils.getColor(mrn.name)
    local marine = utils.getMarine(color)
    if Player[color].seated or dbg.cfg.pretendAllMarinesSeated then
      marine.setPosition(mrn.position)
    else
      marine.call("resetPosition")
    end
  end

  revealedAreas[req.area] = true
end

function isRevealed(name)
  return revealedAreas[name] == true
end
