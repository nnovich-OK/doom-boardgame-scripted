require("instances")
require("maps")
require("constants")
require("utils")

local campaignLoaded = "Episode 1"
local scenarioLoaded = "Knee Deep in the Dead"
local difficultyLoaded = 3

local campaignToLoad = "Episode 1"
local scenarioToLoad = "Knee Deep in the Dead"
local difficultyToLoad = 3
local keepInvWhenLoading = true

local revealedAreas = {}


-- Local methods declaration
local refreshPreview

function onLoad()
end

function onNewGameClick(player, value, id)
  instances.vis.call("toggleInterface", {id="scenarioMenu", color=player.color})
end

function onCampaignChanged(player, value, id)
  Global.UI.setAttribute(campaignToLoad.." Dropdown", "active", "false")
  campaignToLoad = value
  Global.UI.setAttribute(campaignToLoad.." Dropdown", "active", "true")
  Global.UI.setAttribute("campaignNotes", "text", maps[campaignToLoad].notes)

  for k in pairs(maps[campaignToLoad].scenarios) do
    scenarioToLoad = k
    break
  end
  refreshPreview()
end

function onScenarioChanged(player, value, id)
  scenarioToLoad = value
  refreshPreview()
end

function refreshPreview()
  Global.UI.setAttribute("scenarioPreview", "image", "PREVIEW "..campaignToLoad.." - "..scenarioToLoad)
end

function onCancelClick(player, value, id)
  instances.vis.call("hideInterface", {id = value, color = player.color})
end

function onDifficultyClick(player, value, id)
  Global.UI.setAttribute("difficulty"..difficultyToLoad, "color", "rgba(0.4, 0.4, 0.4, 1)")
  difficultyToLoad = tonumber(value, 10)
  Global.UI.setAttribute("difficulty"..difficultyToLoad, "color", "White")
end

function onKeepInventoryClick(player, value, id)
  keepInvWhenLoading = string.lower(value) == "true"
end


function onMapChosen(player, value, id)
  instances.vis.call("showInterface", {id = "difficultyMenu", color=player.color})
end

function onDifficultyChosen(player, value, id)
  broadcastToAll("LOADING NEW SCENARIO", Color.Orange)
  printToAll(" Campaign: ".. campaignToLoad, Color.Orange)
  printToAll(" Scenario: ".. scenarioToLoad, Color.Orange)
  printToAll(" Difficulty: "..difficultyToLoad, Color.Orange)
  printToAll(" Keep inventory: " .. tostring(keepInvWhenLoading), Color.Orange)
  instances.vis.call("hideInterface", {id = "difficultyMenu", color = player.color})


  instances.inv.call("resetFrags")
  instances.luck.call("resetLuck")
  if keepInvWhenLoading then
    instances.inv.call("resetInventoryPartial")
  else
    instances.inv.call("resetInventoryFull", difficultyToLoad)
    for _, clr in ipairs(constants.allMarineColors) do
      utils.getMarine(clr).call("resetHealth", difficultyToLoad)
    end
  end

  -- clear all tiles/tokens
  for _, obj in ipairs(getAllObjects()) do
    if utils.isMonster(obj)
      or utils.isMapTile(obj)
      or utils.isToken(obj)
      or utils.isDoor(obj)
      or utils.isDeckOfTokens(obj)
    then
      obj.destruct()
    end
  end

  revealedAreas = {}
  for areaName in pairs(maps[campaignToLoad].scenarios[scenarioToLoad].areas) do
    revealArea({area=areaName, color=player.color})
    break
  end
end

function revealArea(req)
  if revealedAreas[req.area] then
    return
  end

  broadcastToAll("Revealing "..req.area, req.color)

  local area = maps[campaignToLoad].scenarios[scenarioToLoad].areas[req.area]
  for _, tile in ipairs(area.mapTiles) do
    instances.creator.call("spawnElement", {elem=tile, lock=true})
  end

  for _, door in ipairs(area.doors) do
    if not revealedAreas[door.reveal] then
      instances.creator.call("spawnElement", {elem=door, lock=true})
    end
  end

  for _, tp in ipairs(area.teleporters) do
    instances.creator.call("spawnElement", {elem=tp, lock=true})
  end

  for _, ammo in ipairs(area.ammoTokens) do
    instances.creator.call("spawnElement", {elem=ammo})
    if difficultyToLoad == 1 then
      instances.creator.call("spawnElement", {elem=ammo})
    end
  end

  for _, token in ipairs(area.otherTokens) do
    local lock = false
    if string.find(token.name, "Compass")
      or string.find(token.name, "Encounter")
      or string.find(token.name, "Obstacle")
      or string.find(token.name, "Duct")
      or string.find(token.name, "Barrel")
    then
      lock = true
    end
    instances.creator.call("spawnElement", {elem=token, lock=lock})
  end


  for _, mnst in ipairs(area.colorMonsters) do
    if Player[utils.getColor(mnst.name)].seated or true then --TODO: remove "or true"
      instances.creator.call("spawnElement", {elem=mnst})
    end
  end

  for i, mnst in ipairs(area.greyMonsters) do
    -- workaround with delay, so monster count has time to update
    Wait.time(function()
      instances.creator.call("spawnElement", {elem=mnst})
    end,
    0.1 * i)
  end

  for _, mrn in ipairs(area.marines) do
    local color = utils.getColor(mrn.name)
    local marine = utils.getMarine(color)
    if Player[color].seated then
      marine.setPosition(mrn.position)
    else
      marine.call("resetPosition")
    end
  end

  revealedAreas[req.area] = true
end
